
complete.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00001cf0  00001d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080013c  0080013c  00001e60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000175d  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ca  00000000  00000000  000036fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa8  00000000  00000000  00003ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00004970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da4  00000000  00000000  00005047  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00005deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e0 ef       	ldi	r30, 0xF0	; 240
     16a:	fc e1       	ldi	r31, 0x1C	; 28
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	ac 33       	cpi	r26, 0x3C	; 60
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	ac e3       	ldi	r26, 0x3C	; 60
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	af 35       	cpi	r26, 0x5F	; 95
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 86 05 	call	0xb0c	; 0xb0c <main>
     18c:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <LcdBacklight>:
		LcdChar(str[i]);
	}
}
void LcdCursor(uint8_t Cursor){
	if (Cursor==0)
	{LcdCommand(0xC);
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	21 f4       	brne	.+8      	; 0x1a0 <LcdBacklight+0xc>
     198:	88 e0       	ldi	r24, 0x08	; 8
     19a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     19e:	08 95       	ret
     1a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     1a4:	08 95       	ret

000001a6 <Lcd4bitdata>:
     1a6:	38 2f       	mov	r19, r24
     1a8:	36 2b       	or	r19, r22
     1aa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ae:	23 2b       	or	r18, r19
     1b0:	22 bb       	out	0x12, r18	; 18
     1b2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1b6:	93 2b       	or	r25, r19
     1b8:	94 60       	ori	r25, 0x04	; 4
     1ba:	92 bb       	out	0x12, r25	; 18
     1bc:	ef e8       	ldi	r30, 0x8F	; 143
     1be:	f1 e0       	ldi	r31, 0x01	; 1
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <Lcd4bitdata+0x1a>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <Lcd4bitdata+0x20>
     1c6:	00 00       	nop
     1c8:	8b 7f       	andi	r24, 0xFB	; 251
     1ca:	68 2b       	or	r22, r24
     1cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1d0:	68 2b       	or	r22, r24
     1d2:	62 bb       	out	0x12, r22	; 18
     1d4:	8f e9       	ldi	r24, 0x9F	; 159
     1d6:	9f e0       	ldi	r25, 0x0F	; 15
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <Lcd4bitdata+0x32>
     1dc:	00 c0       	rjmp	.+0      	; 0x1de <Lcd4bitdata+0x38>
     1de:	00 00       	nop
     1e0:	08 95       	ret

000001e2 <LcdCommand>:
     1e2:	cf 93       	push	r28
     1e4:	c8 2f       	mov	r28, r24
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	80 7f       	andi	r24, 0xF0	; 240
     1ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lcd4bitdata>
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	8c 2f       	mov	r24, r28
     1f2:	82 95       	swap	r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lcd4bitdata>
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <LcdInit>:
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 ca 00 	call	0x194	; 0x194 <LcdBacklight>
     204:	8f e3       	ldi	r24, 0x3F	; 63
     206:	9c e9       	ldi	r25, 0x9C	; 156
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <LcdInit+0xa>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <LcdInit+0x10>
     20e:	00 00       	nop
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	81 bb       	out	0x11, r24	; 17
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
     21a:	88 e2       	ldi	r24, 0x28	; 40
     21c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
     220:	8c e0       	ldi	r24, 0x0C	; 12
     222:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
     232:	08 95       	ret

00000234 <LcdChar>:
	Lcd4bitdata(command&0xF0,0);
	Lcd4bitdata((command<<4)&0xF0,0);
	
}

void LcdChar(uint8_t Lcdcharval){
     234:	cf 93       	push	r28
     236:	c8 2f       	mov	r28, r24
	Lcd4bitdata(Lcdcharval&0xF0,1);
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	80 7f       	andi	r24, 0xF0	; 240
     23c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lcd4bitdata>
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	8c 2f       	mov	r24, r28
     244:	82 95       	swap	r24
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lcd4bitdata>
	
}
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <LcdString>:
	LcdString(str);
	
}

void LcdString (char *str)		/* Send string to LCD function */
{
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     25a:	c0 e0       	ldi	r28, 0x00	; 0
     25c:	d0 e0       	ldi	r29, 0x00	; 0
     25e:	03 c0       	rjmp	.+6      	; 0x266 <LcdString+0x16>
	{
		LcdChar(str[i]);
     260:	0e 94 1a 01 	call	0x234	; 0x234 <LcdChar>
}

void LcdString (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     264:	21 96       	adiw	r28, 0x01	; 1
     266:	f8 01       	movw	r30, r16
     268:	ec 0f       	add	r30, r28
     26a:	fd 1f       	adc	r31, r29
     26c:	80 81       	ld	r24, Z
     26e:	81 11       	cpse	r24, r1
     270:	f7 cf       	rjmp	.-18     	; 0x260 <LcdString+0x10>
	{
		LcdChar(str[i]);
	}
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	08 95       	ret

0000027c <LcdSetCursor>:
	Lcd4bitdata(Lcdcharval&0xF0,1);
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
	
}

void LcdSetCursor(uint8_t xaxis, uint8_t yaxis,char*str){
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ea 01       	movw	r28, r20
	uint8_t tempcommand;
	switch(yaxis){
     282:	61 30       	cpi	r22, 0x01	; 1
     284:	31 f0       	breq	.+12     	; 0x292 <LcdSetCursor+0x16>
     286:	58 f0       	brcs	.+22     	; 0x29e <LcdSetCursor+0x22>
     288:	62 30       	cpi	r22, 0x02	; 2
     28a:	29 f0       	breq	.+10     	; 0x296 <LcdSetCursor+0x1a>
     28c:	63 30       	cpi	r22, 0x03	; 3
     28e:	29 f0       	breq	.+10     	; 0x29a <LcdSetCursor+0x1e>
     290:	07 c0       	rjmp	.+14     	; 0x2a0 <LcdSetCursor+0x24>
		case 0:tempcommand=0x80;break;  //yaxis =0
		case 1:tempcommand=0xC0;break;
     292:	90 ec       	ldi	r25, 0xC0	; 192
     294:	05 c0       	rjmp	.+10     	; 0x2a0 <LcdSetCursor+0x24>
		case 2:tempcommand=0x94;break;
     296:	94 e9       	ldi	r25, 0x94	; 148
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <LcdSetCursor+0x24>
		case 3:tempcommand=0xd4;break;		
     29a:	94 ed       	ldi	r25, 0xD4	; 212
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <LcdSetCursor+0x24>
}

void LcdSetCursor(uint8_t xaxis, uint8_t yaxis,char*str){
	uint8_t tempcommand;
	switch(yaxis){
		case 0:tempcommand=0x80;break;  //yaxis =0
     29e:	90 e8       	ldi	r25, 0x80	; 128
		case 1:tempcommand=0xC0;break;
		case 2:tempcommand=0x94;break;
		case 3:tempcommand=0xd4;break;		
	}
	LcdCommand(tempcommand|(0x0F&xaxis));
     2a0:	8f 70       	andi	r24, 0x0F	; 15
     2a2:	89 2b       	or	r24, r25
     2a4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
	LcdString(str);
     2a8:	ce 01       	movw	r24, r28
     2aa:	0e 94 28 01 	call	0x250	; 0x250 <LcdString>
	
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <getkeyNum>:
	}
	
}

uint8_t getkeyNum(){
	DDRB=0b00001111;
     2b4:	8f e0       	ldi	r24, 0x0F	; 15
     2b6:	87 bb       	out	0x17, r24	; 23
	PORTB=0b11110000;
     2b8:	80 ef       	ldi	r24, 0xF0	; 240
     2ba:	88 bb       	out	0x18, r24	; 24
	uint8_t getx;
	uint8_t gety;
	while(1){
		
		uint8_t pin=(~(PINB|0x0F));
     2bc:	86 b3       	in	r24, 0x16	; 22
     2be:	8f 60       	ori	r24, 0x0F	; 15
     2c0:	80 95       	com	r24
		if (pin)
     2c2:	e1 f3       	breq	.-8      	; 0x2bc <getkeyNum+0x8>
		{
			
			
			switch(pin){
     2c4:	80 32       	cpi	r24, 0x20	; 32
     2c6:	49 f0       	breq	.+18     	; 0x2da <getkeyNum+0x26>
     2c8:	18 f4       	brcc	.+6      	; 0x2d0 <getkeyNum+0x1c>
     2ca:	80 31       	cpi	r24, 0x10	; 16
     2cc:	61 f0       	breq	.+24     	; 0x2e6 <getkeyNum+0x32>
     2ce:	0c c0       	rjmp	.+24     	; 0x2e8 <getkeyNum+0x34>
     2d0:	80 34       	cpi	r24, 0x40	; 64
     2d2:	29 f0       	breq	.+10     	; 0x2de <getkeyNum+0x2a>
     2d4:	80 38       	cpi	r24, 0x80	; 128
     2d6:	29 f0       	breq	.+10     	; 0x2e2 <getkeyNum+0x2e>
     2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <getkeyNum+0x34>
				
				
				case (1<<4) :getx=0; break;
				case (1<<5) :getx=1;break;
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <getkeyNum+0x34>
				case (1<<6) :getx=2;break;
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <getkeyNum+0x34>
				case (1<<7) :getx=3;break;
     2e2:	93 e0       	ldi	r25, 0x03	; 3
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <getkeyNum+0x34>
			
			
			switch(pin){
				
				
				case (1<<4) :getx=0; break;
     2e6:	90 e0       	ldi	r25, 0x00	; 0
				case (1<<6) :getx=2;break;
				case (1<<7) :getx=3;break;
				
				
			} //switch
			DDRB=0b0;
     2e8:	17 ba       	out	0x17, r1	; 23
			PORTB=0b0;
     2ea:	18 ba       	out	0x18, r1	; 24
			
			DDRB=0b11110000;
     2ec:	80 ef       	ldi	r24, 0xF0	; 240
     2ee:	87 bb       	out	0x17, r24	; 23
			PORTB=0b00001111;
     2f0:	8f e0       	ldi	r24, 0x0F	; 15
     2f2:	88 bb       	out	0x18, r24	; 24
			
			pin=~(PINB|0xF0);
     2f4:	86 b3       	in	r24, 0x16	; 22
     2f6:	80 6f       	ori	r24, 0xF0	; 240
     2f8:	80 95       	com	r24
			
			switch(pin){
     2fa:	82 30       	cpi	r24, 0x02	; 2
     2fc:	49 f0       	breq	.+18     	; 0x310 <getkeyNum+0x5c>
     2fe:	18 f4       	brcc	.+6      	; 0x306 <getkeyNum+0x52>
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	61 f0       	breq	.+24     	; 0x31c <getkeyNum+0x68>
     304:	0c c0       	rjmp	.+24     	; 0x31e <getkeyNum+0x6a>
     306:	84 30       	cpi	r24, 0x04	; 4
     308:	29 f0       	breq	.+10     	; 0x314 <getkeyNum+0x60>
     30a:	88 30       	cpi	r24, 0x08	; 8
     30c:	29 f0       	breq	.+10     	; 0x318 <getkeyNum+0x64>
     30e:	07 c0       	rjmp	.+14     	; 0x31e <getkeyNum+0x6a>
				case (1<<0) :gety=0;break;
				case (1<<1) :gety=1;break;
     310:	e1 e0       	ldi	r30, 0x01	; 1
     312:	05 c0       	rjmp	.+10     	; 0x31e <getkeyNum+0x6a>
				case (1<<2) :gety=2;break;
     314:	e2 e0       	ldi	r30, 0x02	; 2
     316:	03 c0       	rjmp	.+6      	; 0x31e <getkeyNum+0x6a>
				case (1<<3) :gety=3;break;
     318:	e3 e0       	ldi	r30, 0x03	; 3
     31a:	01 c0       	rjmp	.+2      	; 0x31e <getkeyNum+0x6a>
			PORTB=0b00001111;
			
			pin=~(PINB|0xF0);
			
			switch(pin){
				case (1<<0) :gety=0;break;
     31c:	e0 e0       	ldi	r30, 0x00	; 0
				case (1<<2) :gety=2;break;
				case (1<<3) :gety=3;break;
				
			} //switch
			
			DDRB=0b00001111;
     31e:	8f e0       	ldi	r24, 0x0F	; 15
     320:	87 bb       	out	0x17, r24	; 23
			PORTB=0b11110000;
     322:	80 ef       	ldi	r24, 0xF0	; 240
     324:	88 bb       	out	0x18, r24	; 24
			
			
			return kaypad[gety][getx];
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	e5 5d       	subi	r30, 0xD5	; 213
     332:	fe 4f       	sbci	r31, 0xFE	; 254
     334:	e9 0f       	add	r30, r25
     336:	f1 1d       	adc	r31, r1
		}//if
		
		
		
	}//while 1
}
     338:	80 81       	ld	r24, Z
     33a:	08 95       	ret

0000033c <getTemp>:

void getTemp(){
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	00 d0       	rcall	.+0      	; 0x344 <getTemp+0x8>
     344:	1f 92       	push	r1
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
	
	LcdCommand(LCD_CLEARDISPLAY);
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
	LcdSetCursor(0,0,"Set temperature");
     350:	41 e6       	ldi	r20, 0x61	; 97
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	34 e3       	ldi	r19, 0x34	; 52
     360:	8c e0       	ldi	r24, 0x0C	; 12
     362:	21 50       	subi	r18, 0x01	; 1
     364:	30 40       	sbci	r19, 0x00	; 0
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	e1 f7       	brne	.-8      	; 0x362 <getTemp+0x26>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <getTemp+0x30>
     36c:	00 00       	nop
	_delay_ms(500);
	uint8_t pos=0;
	uint8_t numbers[3]={0,0,0};
     36e:	19 82       	std	Y+1, r1	; 0x01
     370:	1a 82       	std	Y+2, r1	; 0x02
     372:	1b 82       	std	Y+3, r1	; 0x03
	sprintf(lcddata,"%u%u%u",numbers[0],numbers[1],numbers[2]);
     374:	1f 92       	push	r1
     376:	1f 92       	push	r1
     378:	1f 92       	push	r1
     37a:	1f 92       	push	r1
     37c:	1f 92       	push	r1
     37e:	1f 92       	push	r1
     380:	81 e9       	ldi	r24, 0x91	; 145
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	9f 93       	push	r25
     386:	8f 93       	push	r24
     388:	8a e4       	ldi	r24, 0x4A	; 74
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	9f 93       	push	r25
     38e:	8f 93       	push	r24
     390:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
	LcdSetCursor(0,1,lcddata);
     394:	4a e4       	ldi	r20, 0x4A	; 74
     396:	51 e0       	ldi	r21, 0x01	; 1
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	LcdSetCursor(pos,1,"");
     3a0:	4a e2       	ldi	r20, 0x2A	; 42
     3a2:	51 e0       	ldi	r21, 0x01	; 1
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     3ac:	8d e0       	ldi	r24, 0x0D	; 13
     3ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
void getTemp(){
	
	LcdCommand(LCD_CLEARDISPLAY);
	LcdSetCursor(0,0,"Set temperature");
	_delay_ms(500);
	uint8_t pos=0;
     3bc:	10 e0       	ldi	r17, 0x00	; 0
	LcdSetCursor(0,1,lcddata);
	LcdSetCursor(pos,1,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
	
	while(1){
		key=getkeyNum();
     3be:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <getkeyNum>
     3c2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <key>
		if (key<10)
     3c6:	8a 30       	cpi	r24, 0x0A	; 10
     3c8:	c8 f5       	brcc	.+114    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		{
			numbers[pos]=key;
     3ca:	e1 e0       	ldi	r30, 0x01	; 1
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ec 0f       	add	r30, r28
     3d0:	fd 1f       	adc	r31, r29
     3d2:	e1 0f       	add	r30, r17
     3d4:	f1 1d       	adc	r31, r1
     3d6:	80 83       	st	Z, r24
			sprintf(lcddata,"%u%u%u",numbers[0],numbers[1],numbers[2]);
     3d8:	2b 81       	ldd	r18, Y+3	; 0x03
     3da:	9a 81       	ldd	r25, Y+2	; 0x02
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	1f 92       	push	r1
     3e0:	2f 93       	push	r18
     3e2:	1f 92       	push	r1
     3e4:	9f 93       	push	r25
     3e6:	1f 92       	push	r1
     3e8:	8f 93       	push	r24
     3ea:	81 e9       	ldi	r24, 0x91	; 145
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	8a e4       	ldi	r24, 0x4A	; 74
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
			LcdSetCursor(0,1,lcddata);
     3fe:	4a e4       	ldi	r20, 0x4A	; 74
     400:	51 e0       	ldi	r21, 0x01	; 1
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
			pos++;
     40a:	1f 5f       	subi	r17, 0xFF	; 255
			if (pos>2)
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	13 30       	cpi	r17, 0x03	; 3
     418:	08 f0       	brcs	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			{pos=0;
     41a:	10 e0       	ldi	r17, 0x00	; 0
			}
			LcdSetCursor(pos,1,"");
     41c:	4a e2       	ldi	r20, 0x2A	; 42
     41e:	51 e0       	ldi	r21, 0x01	; 1
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	81 2f       	mov	r24, r17
     424:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     428:	9f ef       	ldi	r25, 0xFF	; 255
     42a:	21 ee       	ldi	r18, 0xE1	; 225
     42c:	34 e0       	ldi	r19, 0x04	; 4
     42e:	91 50       	subi	r25, 0x01	; 1
     430:	20 40       	sbci	r18, 0x00	; 0
     432:	30 40       	sbci	r19, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     438:	00 00       	nop
     43a:	c1 cf       	rjmp	.-126    	; 0x3be <getTemp+0x82>
			_delay_ms(200);
		}
		
		else if (key==14)
     43c:	8e 30       	cpi	r24, 0x0E	; 14
     43e:	09 f0       	breq	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     440:	be cf       	rjmp	.-132    	; 0x3be <getTemp+0x82>
		{LcdCommand(LCD_CLEARDISPLAY);
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
		LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     448:	8c e0       	ldi	r24, 0x0C	; 12
     44a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
		break;
		}
	}
	templimit=(numbers[0]*100)+(numbers[1]*10)+numbers[2];
     44e:	29 81       	ldd	r18, Y+1	; 0x01
     450:	8a 81       	ldd	r24, Y+2	; 0x02
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	ac 01       	movw	r20, r24
     456:	44 0f       	add	r20, r20
     458:	55 1f       	adc	r21, r21
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	84 0f       	add	r24, r20
     468:	95 1f       	adc	r25, r21
     46a:	34 e6       	ldi	r19, 0x64	; 100
     46c:	23 9f       	mul	r18, r19
     46e:	80 0d       	add	r24, r0
     470:	91 1d       	adc	r25, r1
     472:	11 24       	eor	r1, r1
     474:	2b 81       	ldd	r18, Y+3	; 0x03
     476:	82 0f       	add	r24, r18
     478:	91 1d       	adc	r25, r1
     47a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <templimit+0x1>
     47e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <templimit>
	LcdSetCursor(0,0,"Temperature set!");
     482:	41 e7       	ldi	r20, 0x71	; 113
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	sprintf(lcddata,"%u",templimit);
     48e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <templimit+0x1>
     492:	8f 93       	push	r24
     494:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <templimit>
     498:	8f 93       	push	r24
     49a:	85 e9       	ldi	r24, 0x95	; 149
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
     4a2:	8a e4       	ldi	r24, 0x4A	; 74
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
	LcdSetCursor(0,1,lcddata);
     4ae:	4a e4       	ldi	r20, 0x4A	; 74
     4b0:	51 e0       	ldi	r21, 0x01	; 1
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	99 e6       	ldi	r25, 0x69	; 105
     4be:	28 e1       	ldi	r18, 0x18	; 24
     4c0:	81 50       	subi	r24, 0x01	; 1
     4c2:	90 40       	sbci	r25, 0x00	; 0
     4c4:	20 40       	sbci	r18, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
     4ca:	00 00       	nop
	_delay_ms(1000);
	LcdCommand(LCD_CLEARDISPLAY);
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
	
}
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	08 95       	ret

000004ec <getMoist>:

void getMoist(){
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <getMoist+0x8>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <getMoist+0xa>
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
	LcdCommand(LCD_CLEARDISPLAY);
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
	LcdSetCursor(0,0,"Set Moisture");
     500:	42 e8       	ldi	r20, 0x82	; 130
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     50c:	2f ef       	ldi	r18, 0xFF	; 255
     50e:	34 e3       	ldi	r19, 0x34	; 52
     510:	8c e0       	ldi	r24, 0x0C	; 12
     512:	21 50       	subi	r18, 0x01	; 1
     514:	30 40       	sbci	r19, 0x00	; 0
     516:	80 40       	sbci	r24, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <getMoist+0x26>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <getMoist+0x30>
     51c:	00 00       	nop
	_delay_ms(500);
	uint8_t pos=0;
	uint8_t numbers[4]={0,0,0,0};
     51e:	19 82       	std	Y+1, r1	; 0x01
     520:	1a 82       	std	Y+2, r1	; 0x02
     522:	1b 82       	std	Y+3, r1	; 0x03
     524:	1c 82       	std	Y+4, r1	; 0x04
	sprintf(lcddata,"%u%u%u%u",numbers[0],numbers[1],numbers[2],numbers[3]);
     526:	1f 92       	push	r1
     528:	1f 92       	push	r1
     52a:	1f 92       	push	r1
     52c:	1f 92       	push	r1
     52e:	1f 92       	push	r1
     530:	1f 92       	push	r1
     532:	1f 92       	push	r1
     534:	1f 92       	push	r1
     536:	8f e8       	ldi	r24, 0x8F	; 143
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	8a e4       	ldi	r24, 0x4A	; 74
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	9f 93       	push	r25
     544:	8f 93       	push	r24
     546:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
	LcdSetCursor(0,1,lcddata);
     54a:	4a e4       	ldi	r20, 0x4A	; 74
     54c:	51 e0       	ldi	r21, 0x01	; 1
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	LcdSetCursor(pos,1,"");
     556:	4a e2       	ldi	r20, 0x2A	; 42
     558:	51 e0       	ldi	r21, 0x01	; 1
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     562:	8d e0       	ldi	r24, 0x0D	; 13
     564:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61

void getMoist(){
	LcdCommand(LCD_CLEARDISPLAY);
	LcdSetCursor(0,0,"Set Moisture");
	_delay_ms(500);
	uint8_t pos=0;
     572:	10 e0       	ldi	r17, 0x00	; 0
	LcdSetCursor(0,1,lcddata);
	LcdSetCursor(pos,1,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
	
	while(1){
		key=getkeyNum();
     574:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <getkeyNum>
     578:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <key>
		if (key<10)
     57c:	8a 30       	cpi	r24, 0x0A	; 10
     57e:	e0 f5       	brcc	.+120    	; 0x5f8 <getMoist+0x10c>
		{
			numbers[pos]=key;
     580:	e1 e0       	ldi	r30, 0x01	; 1
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ec 0f       	add	r30, r28
     586:	fd 1f       	adc	r31, r29
     588:	e1 0f       	add	r30, r17
     58a:	f1 1d       	adc	r31, r1
     58c:	80 83       	st	Z, r24
			sprintf(lcddata,"%u%u%u%u",numbers[0],numbers[1],numbers[2],numbers[3]);
     58e:	3c 81       	ldd	r19, Y+4	; 0x04
     590:	2b 81       	ldd	r18, Y+3	; 0x03
     592:	9a 81       	ldd	r25, Y+2	; 0x02
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	1f 92       	push	r1
     598:	3f 93       	push	r19
     59a:	1f 92       	push	r1
     59c:	2f 93       	push	r18
     59e:	1f 92       	push	r1
     5a0:	9f 93       	push	r25
     5a2:	1f 92       	push	r1
     5a4:	8f 93       	push	r24
     5a6:	8f e8       	ldi	r24, 0x8F	; 143
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	8a e4       	ldi	r24, 0x4A	; 74
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
			LcdSetCursor(0,1,lcddata);
     5ba:	4a e4       	ldi	r20, 0x4A	; 74
     5bc:	51 e0       	ldi	r21, 0x01	; 1
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
			pos++;
     5c6:	1f 5f       	subi	r17, 0xFF	; 255
			if (pos>3)
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	14 30       	cpi	r17, 0x04	; 4
     5d4:	08 f0       	brcs	.+2      	; 0x5d8 <getMoist+0xec>
			{pos=0;
     5d6:	10 e0       	ldi	r17, 0x00	; 0
			}
			LcdSetCursor(pos,1,"");
     5d8:	4a e2       	ldi	r20, 0x2A	; 42
     5da:	51 e0       	ldi	r21, 0x01	; 1
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	81 2f       	mov	r24, r17
     5e0:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     5e4:	9f ef       	ldi	r25, 0xFF	; 255
     5e6:	21 ee       	ldi	r18, 0xE1	; 225
     5e8:	34 e0       	ldi	r19, 0x04	; 4
     5ea:	91 50       	subi	r25, 0x01	; 1
     5ec:	20 40       	sbci	r18, 0x00	; 0
     5ee:	30 40       	sbci	r19, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <getMoist+0xfe>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <getMoist+0x108>
     5f4:	00 00       	nop
     5f6:	be cf       	rjmp	.-132    	; 0x574 <getMoist+0x88>
			_delay_ms(200);
		}
		
		else if (key==14)
     5f8:	8e 30       	cpi	r24, 0x0E	; 14
     5fa:	09 f0       	breq	.+2      	; 0x5fe <getMoist+0x112>
     5fc:	bb cf       	rjmp	.-138    	; 0x574 <getMoist+0x88>
		{LcdCommand(LCD_CLEARDISPLAY);
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
			LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     604:	8c e0       	ldi	r24, 0x0C	; 12
     606:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
			break;
		}
	}
	moisturelimit=(numbers[0]*1000)+(numbers[1]*100)+(numbers[2]*10)+numbers[3];
     60a:	49 81       	ldd	r20, Y+1	; 0x01
     60c:	28 ee       	ldi	r18, 0xE8	; 232
     60e:	33 e0       	ldi	r19, 0x03	; 3
     610:	42 9f       	mul	r20, r18
     612:	c0 01       	movw	r24, r0
     614:	43 9f       	mul	r20, r19
     616:	90 0d       	add	r25, r0
     618:	11 24       	eor	r1, r1
     61a:	2a 81       	ldd	r18, Y+2	; 0x02
     61c:	ac 01       	movw	r20, r24
     61e:	34 e6       	ldi	r19, 0x64	; 100
     620:	23 9f       	mul	r18, r19
     622:	40 0d       	add	r20, r0
     624:	51 1d       	adc	r21, r1
     626:	11 24       	eor	r1, r1
     628:	9b 81       	ldd	r25, Y+3	; 0x03
     62a:	89 2f       	mov	r24, r25
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	bc 01       	movw	r22, r24
     630:	66 0f       	add	r22, r22
     632:	77 1f       	adc	r23, r23
     634:	9c 01       	movw	r18, r24
     636:	22 0f       	add	r18, r18
     638:	33 1f       	adc	r19, r19
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	cb 01       	movw	r24, r22
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	84 0f       	add	r24, r20
     64a:	95 1f       	adc	r25, r21
     64c:	2c 81       	ldd	r18, Y+4	; 0x04
     64e:	82 0f       	add	r24, r18
     650:	91 1d       	adc	r25, r1
     652:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <moisturelimit+0x1>
     656:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <moisturelimit>
	LcdSetCursor(0,0,"Moisture set!");
     65a:	48 e9       	ldi	r20, 0x98	; 152
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	sprintf(lcddata,"%u",moisturelimit);
     666:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <moisturelimit+0x1>
     66a:	8f 93       	push	r24
     66c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <moisturelimit>
     670:	8f 93       	push	r24
     672:	85 e9       	ldi	r24, 0x95	; 149
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	8a e4       	ldi	r24, 0x4A	; 74
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
	LcdSetCursor(0,1,lcddata);
     686:	4a e4       	ldi	r20, 0x4A	; 74
     688:	51 e0       	ldi	r21, 0x01	; 1
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     692:	8f ef       	ldi	r24, 0xFF	; 255
     694:	99 e6       	ldi	r25, 0x69	; 105
     696:	28 e1       	ldi	r18, 0x18	; 24
     698:	81 50       	subi	r24, 0x01	; 1
     69a:	90 40       	sbci	r25, 0x00	; 0
     69c:	20 40       	sbci	r18, 0x00	; 0
     69e:	e1 f7       	brne	.-8      	; 0x698 <getMoist+0x1ac>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <getMoist+0x1b6>
     6a2:	00 00       	nop
	_delay_ms(1000);
	LcdCommand(LCD_CLEARDISPLAY);	
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
	
	
}
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	08 95       	ret

000006c6 <getweight>:

void getweight(){
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <getweight+0x8>
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <getweight+0xa>
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
	LcdCommand(LCD_CLEARDISPLAY);
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
	LcdSetCursor(0,0,"Set Weight(g)");
     6da:	46 ea       	ldi	r20, 0xA6	; 166
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     6e6:	2f ef       	ldi	r18, 0xFF	; 255
     6e8:	34 e3       	ldi	r19, 0x34	; 52
     6ea:	8c e0       	ldi	r24, 0x0C	; 12
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	30 40       	sbci	r19, 0x00	; 0
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <getweight+0x26>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <getweight+0x30>
     6f6:	00 00       	nop
	_delay_ms(500);
	uint8_t pos=0;
	uint8_t numbers[4]={0,0,0,0};
     6f8:	19 82       	std	Y+1, r1	; 0x01
     6fa:	1a 82       	std	Y+2, r1	; 0x02
     6fc:	1b 82       	std	Y+3, r1	; 0x03
     6fe:	1c 82       	std	Y+4, r1	; 0x04
	sprintf(lcddata,"%u%u%u%u",numbers[0],numbers[1],numbers[2],numbers[3]);
     700:	1f 92       	push	r1
     702:	1f 92       	push	r1
     704:	1f 92       	push	r1
     706:	1f 92       	push	r1
     708:	1f 92       	push	r1
     70a:	1f 92       	push	r1
     70c:	1f 92       	push	r1
     70e:	1f 92       	push	r1
     710:	8f e8       	ldi	r24, 0x8F	; 143
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	9f 93       	push	r25
     716:	8f 93       	push	r24
     718:	8a e4       	ldi	r24, 0x4A	; 74
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	9f 93       	push	r25
     71e:	8f 93       	push	r24
     720:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
	LcdSetCursor(0,1,lcddata);
     724:	4a e4       	ldi	r20, 0x4A	; 74
     726:	51 e0       	ldi	r21, 0x01	; 1
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	LcdSetCursor(pos,1,"");
     730:	4a e2       	ldi	r20, 0x2A	; 42
     732:	51 e0       	ldi	r21, 0x01	; 1
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     73c:	8d e0       	ldi	r24, 0x0D	; 13
     73e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61

void getweight(){
	LcdCommand(LCD_CLEARDISPLAY);
	LcdSetCursor(0,0,"Set Weight(g)");
	_delay_ms(500);
	uint8_t pos=0;
     74c:	10 e0       	ldi	r17, 0x00	; 0
	LcdSetCursor(0,1,lcddata);
	LcdSetCursor(pos,1,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
	
	while(1){
		key=getkeyNum();
     74e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <getkeyNum>
     752:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <key>
		if (key<10)
     756:	8a 30       	cpi	r24, 0x0A	; 10
     758:	e0 f5       	brcc	.+120    	; 0x7d2 <getweight+0x10c>
		{
			numbers[pos]=key;
     75a:	e1 e0       	ldi	r30, 0x01	; 1
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	ec 0f       	add	r30, r28
     760:	fd 1f       	adc	r31, r29
     762:	e1 0f       	add	r30, r17
     764:	f1 1d       	adc	r31, r1
     766:	80 83       	st	Z, r24
			sprintf(lcddata,"%u%u%u%u",numbers[0],numbers[1],numbers[2],numbers[3]);
     768:	3c 81       	ldd	r19, Y+4	; 0x04
     76a:	2b 81       	ldd	r18, Y+3	; 0x03
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	1f 92       	push	r1
     772:	3f 93       	push	r19
     774:	1f 92       	push	r1
     776:	2f 93       	push	r18
     778:	1f 92       	push	r1
     77a:	9f 93       	push	r25
     77c:	1f 92       	push	r1
     77e:	8f 93       	push	r24
     780:	8f e8       	ldi	r24, 0x8F	; 143
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	8a e4       	ldi	r24, 0x4A	; 74
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
			LcdSetCursor(0,1,lcddata);
     794:	4a e4       	ldi	r20, 0x4A	; 74
     796:	51 e0       	ldi	r21, 0x01	; 1
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
			pos++;
     7a0:	1f 5f       	subi	r17, 0xFF	; 255
			if (pos>3)
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	14 30       	cpi	r17, 0x04	; 4
     7ae:	08 f0       	brcs	.+2      	; 0x7b2 <getweight+0xec>
			{pos=0;
     7b0:	10 e0       	ldi	r17, 0x00	; 0
			}
			LcdSetCursor(pos,1,"");
     7b2:	4a e2       	ldi	r20, 0x2A	; 42
     7b4:	51 e0       	ldi	r21, 0x01	; 1
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	81 2f       	mov	r24, r17
     7ba:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     7be:	9f ef       	ldi	r25, 0xFF	; 255
     7c0:	21 ee       	ldi	r18, 0xE1	; 225
     7c2:	34 e0       	ldi	r19, 0x04	; 4
     7c4:	91 50       	subi	r25, 0x01	; 1
     7c6:	20 40       	sbci	r18, 0x00	; 0
     7c8:	30 40       	sbci	r19, 0x00	; 0
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <getweight+0xfe>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <getweight+0x108>
     7ce:	00 00       	nop
     7d0:	be cf       	rjmp	.-132    	; 0x74e <getweight+0x88>
			_delay_ms(200);
		}
		
		else if (key==14)
     7d2:	8e 30       	cpi	r24, 0x0E	; 14
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <getweight+0x112>
     7d6:	bb cf       	rjmp	.-138    	; 0x74e <getweight+0x88>
		{LcdCommand(LCD_CLEARDISPLAY);
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
			LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     7de:	8c e0       	ldi	r24, 0x0C	; 12
     7e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
			break;
		}
	}
	weightlimit=(numbers[0]*1000)+(numbers[1]*100)+(numbers[2]*10)+numbers[3];
     7e4:	49 81       	ldd	r20, Y+1	; 0x01
     7e6:	28 ee       	ldi	r18, 0xE8	; 232
     7e8:	33 e0       	ldi	r19, 0x03	; 3
     7ea:	42 9f       	mul	r20, r18
     7ec:	c0 01       	movw	r24, r0
     7ee:	43 9f       	mul	r20, r19
     7f0:	90 0d       	add	r25, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	2a 81       	ldd	r18, Y+2	; 0x02
     7f6:	ac 01       	movw	r20, r24
     7f8:	34 e6       	ldi	r19, 0x64	; 100
     7fa:	23 9f       	mul	r18, r19
     7fc:	40 0d       	add	r20, r0
     7fe:	51 1d       	adc	r21, r1
     800:	11 24       	eor	r1, r1
     802:	9b 81       	ldd	r25, Y+3	; 0x03
     804:	89 2f       	mov	r24, r25
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	bc 01       	movw	r22, r24
     80a:	66 0f       	add	r22, r22
     80c:	77 1f       	adc	r23, r23
     80e:	9c 01       	movw	r18, r24
     810:	22 0f       	add	r18, r18
     812:	33 1f       	adc	r19, r19
     814:	22 0f       	add	r18, r18
     816:	33 1f       	adc	r19, r19
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	cb 01       	movw	r24, r22
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	84 0f       	add	r24, r20
     824:	95 1f       	adc	r25, r21
     826:	2c 81       	ldd	r18, Y+4	; 0x04
     828:	82 0f       	add	r24, r18
     82a:	91 1d       	adc	r25, r1
     82c:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <weightlimit+0x1>
     830:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <weightlimit>
	LcdSetCursor(0,0,"Weight set!");
     834:	44 eb       	ldi	r20, 0xB4	; 180
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	sprintf(lcddata,"%ug",weightlimit);
     840:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <weightlimit+0x1>
     844:	8f 93       	push	r24
     846:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <weightlimit>
     84a:	8f 93       	push	r24
     84c:	80 ec       	ldi	r24, 0xC0	; 192
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	8a e4       	ldi	r24, 0x4A	; 74
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
	LcdSetCursor(0,1,lcddata);
     860:	4a e4       	ldi	r20, 0x4A	; 74
     862:	51 e0       	ldi	r21, 0x01	; 1
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	94 e3       	ldi	r25, 0x34	; 52
     870:	2c e0       	ldi	r18, 0x0C	; 12
     872:	81 50       	subi	r24, 0x01	; 1
     874:	90 40       	sbci	r25, 0x00	; 0
     876:	20 40       	sbci	r18, 0x00	; 0
     878:	e1 f7       	brne	.-8      	; 0x872 <__stack+0x13>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
     87c:	00 00       	nop
	_delay_ms(500);
	LcdCommand(LCD_CLEARDISPLAY);	
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
	
}
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	08 95       	ret

000008a0 <stepperMotor>:

void stepperMotor(uint8_t side,uint16_t cycle){
	ControlPort=(ControlPort&~(1<<DIRL))|(side<<DIRL);
     8a0:	25 b3       	in	r18, 0x15	; 21
     8a2:	30 e1       	ldi	r19, 0x10	; 16
     8a4:	83 9f       	mul	r24, r19
     8a6:	c0 01       	movw	r24, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 7e       	andi	r18, 0xEF	; 239
     8ac:	82 2b       	or	r24, r18
     8ae:	85 bb       	out	0x15, r24	; 21

	for(uint16_t i=0;i<cycle;i++){
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	14 c0       	rjmp	.+40     	; 0x8de <stepperMotor+0x3e>
		ControlPort|=(1<<STEPL);
     8b6:	85 b3       	in	r24, 0x15	; 21
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8bc:	8f ec       	ldi	r24, 0xCF	; 207
     8be:	97 e0       	ldi	r25, 0x07	; 7
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <stepperMotor+0x20>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <stepperMotor+0x26>
     8c6:	00 00       	nop
		_delay_us(1000);
		ControlPort&=~(1<<STEPL);
     8c8:	85 b3       	in	r24, 0x15	; 21
     8ca:	87 7f       	andi	r24, 0xF7	; 247
     8cc:	85 bb       	out	0x15, r24	; 21
     8ce:	8f ec       	ldi	r24, 0xCF	; 207
     8d0:	97 e0       	ldi	r25, 0x07	; 7
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <stepperMotor+0x32>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <stepperMotor+0x38>
     8d8:	00 00       	nop
}

void stepperMotor(uint8_t side,uint16_t cycle){
	ControlPort=(ControlPort&~(1<<DIRL))|(side<<DIRL);

	for(uint16_t i=0;i<cycle;i++){
     8da:	2f 5f       	subi	r18, 0xFF	; 255
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	26 17       	cp	r18, r22
     8e0:	37 07       	cpc	r19, r23
     8e2:	48 f3       	brcs	.-46     	; 0x8b6 <stepperMotor+0x16>
		ControlPort|=(1<<STEPL);
		_delay_us(1000);
		ControlPort&=~(1<<STEPL);
		_delay_us(1000);
	}
}
     8e4:	08 95       	ret

000008e6 <stepperR>:

void stepperR(uint8_t side,uint16_t cycle){
	ControlPort=(ControlPort&~(1<<DIRL))|(side<<DIRL);
     8e6:	25 b3       	in	r18, 0x15	; 21
     8e8:	30 e1       	ldi	r19, 0x10	; 16
     8ea:	83 9f       	mul	r24, r19
     8ec:	c0 01       	movw	r24, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	2f 7e       	andi	r18, 0xEF	; 239
     8f2:	82 2b       	or	r24, r18
     8f4:	85 bb       	out	0x15, r24	; 21

	for(uint16_t i=0;i<cycle;i++){
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	14 c0       	rjmp	.+40     	; 0x924 <stepperR+0x3e>
		ControlPort|=(1<<STEP1);
     8fc:	85 b3       	in	r24, 0x15	; 21
     8fe:	84 60       	ori	r24, 0x04	; 4
     900:	85 bb       	out	0x15, r24	; 21
     902:	8f ec       	ldi	r24, 0xCF	; 207
     904:	97 e0       	ldi	r25, 0x07	; 7
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <stepperR+0x20>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <stepperR+0x26>
     90c:	00 00       	nop
		_delay_us(1000);
		ControlPort&=~(1<<STEP1);
     90e:	85 b3       	in	r24, 0x15	; 21
     910:	8b 7f       	andi	r24, 0xFB	; 251
     912:	85 bb       	out	0x15, r24	; 21
     914:	8f ec       	ldi	r24, 0xCF	; 207
     916:	97 e0       	ldi	r25, 0x07	; 7
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <stepperR+0x32>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <stepperR+0x38>
     91e:	00 00       	nop
}

void stepperR(uint8_t side,uint16_t cycle){
	ControlPort=(ControlPort&~(1<<DIRL))|(side<<DIRL);

	for(uint16_t i=0;i<cycle;i++){
     920:	2f 5f       	subi	r18, 0xFF	; 255
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	26 17       	cp	r18, r22
     926:	37 07       	cpc	r19, r23
     928:	48 f3       	brcs	.-46     	; 0x8fc <stepperR+0x16>
		ControlPort|=(1<<STEP1);
		_delay_us(1000);
		ControlPort&=~(1<<STEP1);
		_delay_us(1000);
	}
}
     92a:	08 95       	ret

0000092c <stepperE>:

void stepperE(uint8_t side,uint16_t cycle){
	ControlPort=(ControlPort&~(1<<DIRL))|(side<<DIRL);
     92c:	25 b3       	in	r18, 0x15	; 21
     92e:	30 e1       	ldi	r19, 0x10	; 16
     930:	83 9f       	mul	r24, r19
     932:	c0 01       	movw	r24, r0
     934:	11 24       	eor	r1, r1
     936:	2f 7e       	andi	r18, 0xEF	; 239
     938:	82 2b       	or	r24, r18
     93a:	85 bb       	out	0x15, r24	; 21

	for(uint16_t i=0;i<cycle;i++){
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	14 c0       	rjmp	.+40     	; 0x96a <stepperE+0x3e>
		PORTD|=(1<<3);
     942:	82 b3       	in	r24, 0x12	; 18
     944:	88 60       	ori	r24, 0x08	; 8
     946:	82 bb       	out	0x12, r24	; 18
     948:	8f ec       	ldi	r24, 0xCF	; 207
     94a:	97 e0       	ldi	r25, 0x07	; 7
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <stepperE+0x20>
     950:	00 c0       	rjmp	.+0      	; 0x952 <stepperE+0x26>
     952:	00 00       	nop
		_delay_us(1000);
		PORTD&=~(1<<3);
     954:	82 b3       	in	r24, 0x12	; 18
     956:	87 7f       	andi	r24, 0xF7	; 247
     958:	82 bb       	out	0x12, r24	; 18
     95a:	8f ec       	ldi	r24, 0xCF	; 207
     95c:	97 e0       	ldi	r25, 0x07	; 7
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	f1 f7       	brne	.-4      	; 0x95e <stepperE+0x32>
     962:	00 c0       	rjmp	.+0      	; 0x964 <stepperE+0x38>
     964:	00 00       	nop
}

void stepperE(uint8_t side,uint16_t cycle){
	ControlPort=(ControlPort&~(1<<DIRL))|(side<<DIRL);

	for(uint16_t i=0;i<cycle;i++){
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	26 17       	cp	r18, r22
     96c:	37 07       	cpc	r19, r23
     96e:	48 f3       	brcs	.-46     	; 0x942 <stepperE+0x16>
		PORTD|=(1<<3);
		_delay_us(1000);
		PORTD&=~(1<<3);
		_delay_us(1000);
	}
}
     970:	08 95       	ret

00000972 <ReadADC>:

uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
     972:	97 b1       	in	r25, 0x07	; 7
     974:	90 7f       	andi	r25, 0xF0	; 240
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	89 2b       	or	r24, r25
     97a:	87 b9       	out	0x07, r24	; 7
	//single conversion mode
	ADCSRA |= (1<<ADSC);
     97c:	86 b1       	in	r24, 0x06	; 6
     97e:	80 64       	ori	r24, 0x40	; 64
     980:	86 b9       	out	0x06, r24	; 6
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
     982:	36 99       	sbic	0x06, 6	; 6
     984:	fe cf       	rjmp	.-4      	; 0x982 <ReadADC+0x10>
	return ADCW;
     986:	84 b1       	in	r24, 0x04	; 4
     988:	95 b1       	in	r25, 0x05	; 5
}
     98a:	08 95       	ret

0000098c <loadCellRead>:

float loadCellRead(){
     98c:	cf 92       	push	r12
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
	hx711H=0;hx711L=0;  //clear variables
     994:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <hx711H>
     998:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
     99c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	33 c0       	rjmp	.+102    	; 0xa0a <loadCellRead+0x7e>
		PORTC|=(1<<0); //Clock pin high
     9a4:	95 b3       	in	r25, 0x15	; 21
     9a6:	91 60       	ori	r25, 0x01	; 1
     9a8:	95 bb       	out	0x15, r25	; 21
     9aa:	9a e1       	ldi	r25, 0x1A	; 26
     9ac:	9a 95       	dec	r25
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <loadCellRead+0x20>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <loadCellRead+0x26>
		_delay_us(10);
		if ((PINC&(1<<1))>>1)  //read data pin
     9b2:	99 9b       	sbis	0x13, 1	; 19
     9b4:	11 c0       	rjmp	.+34     	; 0x9d8 <loadCellRead+0x4c>
		{hx711H|=(1<<(7-i));//set hx 711 varible
     9b6:	47 e0       	ldi	r20, 0x07	; 7
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	48 1b       	sub	r20, r24
     9bc:	51 09       	sbc	r21, r1
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <loadCellRead+0x3c>
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
     9c8:	4a 95       	dec	r20
     9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <loadCellRead+0x38>
     9cc:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <hx711H>
     9d0:	29 2b       	or	r18, r25
     9d2:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <hx711H>
     9d6:	11 c0       	rjmp	.+34     	; 0x9fa <loadCellRead+0x6e>
		}
		else
		{hx711H&=~(1<<(7-i));
     9d8:	47 e0       	ldi	r20, 0x07	; 7
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	48 1b       	sub	r20, r24
     9de:	51 09       	sbc	r21, r1
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <loadCellRead+0x5e>
     9e6:	22 0f       	add	r18, r18
     9e8:	33 1f       	adc	r19, r19
     9ea:	4a 95       	dec	r20
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <loadCellRead+0x5a>
     9ee:	20 95       	com	r18
     9f0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <hx711H>
     9f4:	29 23       	and	r18, r25
     9f6:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <hx711H>
		}
		PORTC&=~(1<<0); //Clock pin low
     9fa:	95 b3       	in	r25, 0x15	; 21
     9fc:	9e 7f       	andi	r25, 0xFE	; 254
     9fe:	95 bb       	out	0x15, r25	; 21
     a00:	9d e0       	ldi	r25, 0x0D	; 13
     a02:	9a 95       	dec	r25
     a04:	f1 f7       	brne	.-4      	; 0xa02 <loadCellRead+0x76>
     a06:	00 00       	nop
	return ADCW;
}

float loadCellRead(){
	hx711H=0;hx711L=0;  //clear variables
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	88 30       	cpi	r24, 0x08	; 8
     a0c:	58 f2       	brcs	.-106    	; 0x9a4 <loadCellRead+0x18>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	3e c0       	rjmp	.+124    	; 0xa8e <loadCellRead+0x102>
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
		PORTC|=(1<<0); //Clock pin high
     a12:	95 b3       	in	r25, 0x15	; 21
     a14:	91 60       	ori	r25, 0x01	; 1
     a16:	95 bb       	out	0x15, r25	; 21
     a18:	9a e1       	ldi	r25, 0x1A	; 26
     a1a:	9a 95       	dec	r25
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <loadCellRead+0x8e>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <loadCellRead+0x94>
		_delay_us(10);
		if ((PINC&(1<<1))>>1) //read data pin
     a20:	99 9b       	sbis	0x13, 1	; 19
     a22:	16 c0       	rjmp	.+44     	; 0xa50 <loadCellRead+0xc4>
		{hx711L|=(1<<(15-i));
     a24:	4f e0       	ldi	r20, 0x0F	; 15
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	48 1b       	sub	r20, r24
     a2a:	51 09       	sbc	r21, r1
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <loadCellRead+0xaa>
     a32:	22 0f       	add	r18, r18
     a34:	33 1f       	adc	r19, r19
     a36:	4a 95       	dec	r20
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <loadCellRead+0xa6>
     a3a:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <__data_end>
     a3e:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <__data_end+0x1>
     a42:	24 2b       	or	r18, r20
     a44:	35 2b       	or	r19, r21
     a46:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__data_end+0x1>
     a4a:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <__data_end>
     a4e:	17 c0       	rjmp	.+46     	; 0xa7e <loadCellRead+0xf2>
		}
		else
		{hx711L&=~(1<<(15-i));
     a50:	4f e0       	ldi	r20, 0x0F	; 15
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	48 1b       	sub	r20, r24
     a56:	51 09       	sbc	r21, r1
     a58:	21 e0       	ldi	r18, 0x01	; 1
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <loadCellRead+0xd6>
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	4a 95       	dec	r20
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <loadCellRead+0xd2>
     a66:	20 95       	com	r18
     a68:	30 95       	com	r19
     a6a:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <__data_end>
     a6e:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <__data_end+0x1>
     a72:	24 23       	and	r18, r20
     a74:	35 23       	and	r19, r21
     a76:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__data_end+0x1>
     a7a:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <__data_end>
		}
		PORTC&=~(1<<0); //Clock pin low
     a7e:	95 b3       	in	r25, 0x15	; 21
     a80:	9e 7f       	andi	r25, 0xFE	; 254
     a82:	95 bb       	out	0x15, r25	; 21
     a84:	9d e0       	ldi	r25, 0x0D	; 13
     a86:	9a 95       	dec	r25
     a88:	f1 f7       	brne	.-4      	; 0xa86 <loadCellRead+0xfa>
     a8a:	00 00       	nop
		PORTC&=~(1<<0); //Clock pin low
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	80 31       	cpi	r24, 0x10	; 16
     a90:	08 f4       	brcc	.+2      	; 0xa94 <loadCellRead+0x108>
     a92:	bf cf       	rjmp	.-130    	; 0xa12 <loadCellRead+0x86>
		}
		PORTC&=~(1<<0); //Clock pin low
		_delay_us(5);
	}
	
	hx711L=hx711L>>1; //shift bits
     a94:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     a98:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
     a9c:	96 95       	lsr	r25
     a9e:	87 95       	ror	r24
     aa0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
     aa4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	
	if (hx711H&1)  //bit setup
     aa8:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <hx711H>
     aac:	60 ff       	sbrs	r22, 0
     aae:	05 c0       	rjmp	.+10     	; 0xaba <loadCellRead+0x12e>
	{hx711L|=(1<<15);
     ab0:	90 68       	ori	r25, 0x80	; 128
     ab2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
     ab6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	}
	else
	{hx711L&=~(1<<15);
	}
	hx711H=hx711H>>1;
     aba:	66 95       	lsr	r22
     abc:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <hx711H>
	
	return (hx711H*(65536/18029.6))+hx711L/18029.6; //load cell calibration
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     aca:	24 e6       	ldi	r18, 0x64	; 100
     acc:	32 ea       	ldi	r19, 0xA2	; 162
     ace:	48 e6       	ldi	r20, 0x68	; 104
     ad0:	50 e4       	ldi	r21, 0x40	; 64
     ad2:	0e 94 87 08 	call	0x110e	; 0x110e <__mulsf3>
     ad6:	6b 01       	movw	r12, r22
     ad8:	7c 01       	movw	r14, r24
     ada:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <__data_end>
     ade:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <__data_end+0x1>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__floatunsisf>
     aea:	23 e3       	ldi	r18, 0x33	; 51
     aec:	3b ed       	ldi	r19, 0xDB	; 219
     aee:	4c e8       	ldi	r20, 0x8C	; 140
     af0:	56 e4       	ldi	r21, 0x46	; 70
     af2:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	c7 01       	movw	r24, r14
     afc:	b6 01       	movw	r22, r12
     afe:	0e 94 e7 06 	call	0xdce	; 0xdce <__addsf3>
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	08 95       	ret

00000b0c <main>:
uint16_t hx711L=0;//Load Scale Low Bits
float loadCellRead();

int main(void)
{
   LcdInit();
     b0c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LcdInit>
   ControlDDR|=(1<<DIRL)|(1<<STEPL)|(1<<STEP1)|(1<<gearMotor)|(1<<blower)|(1<<heater)|(1<<1); 
     b10:	84 b3       	in	r24, 0x14	; 20
     b12:	8e 6f       	ori	r24, 0xFE	; 254
     b14:	84 bb       	out	0x14, r24	; 20
   PORTC&=~(1<<0);//Clock pin low
     b16:	85 b3       	in	r24, 0x15	; 21
     b18:	8e 7f       	andi	r24, 0xFE	; 254
     b1a:	85 bb       	out	0x15, r24	; 21
   ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));   // prescaler 128
     b1c:	86 b1       	in	r24, 0x06	; 6
     b1e:	87 60       	ori	r24, 0x07	; 7
     b20:	86 b9       	out	0x06, r24	; 6
   ADMUX |= (1<<REFS0);					//AVCC
     b22:	87 b1       	in	r24, 0x07	; 7
     b24:	80 64       	ori	r24, 0x40	; 64
     b26:	87 b9       	out	0x07, r24	; 7
   ADCSRA |= (1<<ADEN);                 // Turn on ADC
     b28:	86 b1       	in	r24, 0x06	; 6
     b2a:	80 68       	ori	r24, 0x80	; 128
     b2c:	86 b9       	out	0x06, r24	; 6
   while(1){
	   key=getkeyNum();
     b2e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <getkeyNum>
     b32:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <key>
	   if (key==13)
     b36:	8d 30       	cpi	r24, 0x0D	; 13
     b38:	d1 f7       	brne	.-12     	; 0xb2e <main+0x22>
	   {break;
	   }
	   
   }
   LcdSetCursor(4,0,"Welcome");
     b3a:	44 ec       	ldi	r20, 0xC4	; 196
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b46:	2f ef       	ldi	r18, 0xFF	; 255
     b48:	44 e3       	ldi	r20, 0x34	; 52
     b4a:	5c e0       	ldi	r21, 0x0C	; 12
     b4c:	21 50       	subi	r18, 0x01	; 1
     b4e:	40 40       	sbci	r20, 0x00	; 0
     b50:	50 40       	sbci	r21, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <main+0x40>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <main+0x4a>
     b56:	00 00       	nop
   _delay_ms(500);
   LcdCommand(LCD_CLEARDISPLAY);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
   
   getTemp();
     b5e:	0e 94 9e 01 	call	0x33c	; 0x33c <getTemp>
   getMoist();
     b62:	0e 94 76 02 	call	0x4ec	; 0x4ec <getMoist>
   LcdCommand(LCD_CLEARDISPLAY);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
   LcdSetCursor(0,0,"Starting");
     b6c:	4c ec       	ldi	r20, 0xCC	; 204
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
   
   ControlPort|=(1<<gearMotor);
     b78:	85 b3       	in	r24, 0x15	; 21
     b7a:	80 62       	ori	r24, 0x20	; 32
     b7c:	85 bb       	out	0x15, r24	; 21
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	99 e6       	ldi	r25, 0x69	; 105
     b82:	28 e1       	ldi	r18, 0x18	; 24
     b84:	81 50       	subi	r24, 0x01	; 1
     b86:	90 40       	sbci	r25, 0x00	; 0
     b88:	20 40       	sbci	r18, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <main+0x78>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <main+0x82>
     b8e:	00 00       	nop
   _delay_ms(1000);
    ControlPort&=~(1<<gearMotor);
     b90:	85 b3       	in	r24, 0x15	; 21
     b92:	8f 7d       	andi	r24, 0xDF	; 223
     b94:	85 bb       	out	0x15, r24	; 21
	
  stepperMotor(1,500);
     b96:	64 ef       	ldi	r22, 0xF4	; 244
     b98:	71 e0       	ldi	r23, 0x01	; 1
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <stepperMotor>
  ControlPort|=(1<<blower)|(1<<heater); 
     ba0:	85 b3       	in	r24, 0x15	; 21
     ba2:	80 6c       	ori	r24, 0xC0	; 192
     ba4:	85 bb       	out	0x15, r24	; 21
    while (1) 
    {
		MOIS_Reading=ReadADC(1); //calibrated number
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	0e 94 b9 04 	call	0x972	; 0x972 <ReadADC>
     bac:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <MOIS_Reading+0x1>
     bb0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <MOIS_Reading>
		TempReading=(ReadADC(0)*0.50048876); //calibrated number
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 b9 04 	call	0x972	; 0x972 <ReadADC>
     bba:	bc 01       	movw	r22, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__floatunsisf>
     bc4:	28 e0       	ldi	r18, 0x08	; 8
     bc6:	30 e2       	ldi	r19, 0x20	; 32
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	5f e3       	ldi	r21, 0x3F	; 63
     bcc:	0e 94 87 08 	call	0x110e	; 0x110e <__mulsf3>
     bd0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixunssfsi>
     bd4:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <TempReading+0x1>
     bd8:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <TempReading>
		
		
		sprintf(lcddata,"Moist. %04u",MOIS_Reading);
     bdc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <MOIS_Reading+0x1>
     be0:	8f 93       	push	r24
     be2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <MOIS_Reading>
     be6:	8f 93       	push	r24
     be8:	85 ed       	ldi	r24, 0xD5	; 213
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	ca e4       	ldi	r28, 0x4A	; 74
     bf2:	d1 e0       	ldi	r29, 0x01	; 1
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
		LcdSetCursor(0,0,lcddata);
     bfc:	ae 01       	movw	r20, r28
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
		sprintf(lcddata,"Temp %03uC",TempReading);
     c06:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <TempReading+0x1>
     c0a:	8f 93       	push	r24
     c0c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <TempReading>
     c10:	8f 93       	push	r24
     c12:	81 ee       	ldi	r24, 0xE1	; 225
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
		LcdSetCursor(0,1,lcddata);
     c22:	ae 01       	movw	r20, r28
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
		
		if ((MOIS_Reading<moisturelimit)&&(TempReading>templimit))
     c2c:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <MOIS_Reading>
     c30:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <MOIS_Reading+0x1>
     c34:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <moisturelimit>
     c38:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <moisturelimit+0x1>
     c3c:	4d b7       	in	r20, 0x3d	; 61
     c3e:	5e b7       	in	r21, 0x3e	; 62
     c40:	44 5f       	subi	r20, 0xF4	; 244
     c42:	5f 4f       	sbci	r21, 0xFF	; 255
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	5e bf       	out	0x3e, r21	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	4d bf       	out	0x3d, r20	; 61
     c4e:	28 17       	cp	r18, r24
     c50:	39 07       	cpc	r19, r25
     c52:	08 f0       	brcs	.+2      	; 0xc56 <main+0x14a>
     c54:	a8 cf       	rjmp	.-176    	; 0xba6 <main+0x9a>
     c56:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <TempReading>
     c5a:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <TempReading+0x1>
     c5e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <templimit>
     c62:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <templimit+0x1>
     c66:	82 17       	cp	r24, r18
     c68:	93 07       	cpc	r25, r19
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <main+0x162>
     c6c:	9c cf       	rjmp	.-200    	; 0xba6 <main+0x9a>
		{LcdCommand(LCD_CLEARDISPLAY);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
			LcdSetCursor(0,0,"Limits Reached");
     c74:	4c ee       	ldi	r20, 0xEC	; 236
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     c80:	5f ef       	ldi	r21, 0xFF	; 255
     c82:	83 ed       	ldi	r24, 0xD3	; 211
     c84:	90 e3       	ldi	r25, 0x30	; 48
     c86:	51 50       	subi	r21, 0x01	; 1
     c88:	80 40       	sbci	r24, 0x00	; 0
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <main+0x17a>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <main+0x184>
     c90:	00 00       	nop
			_delay_ms(2000);//////////////////////////////////////clean up delay
			ControlPort&=~((1<<gearMotor)|(1<<blower)|(1<<heater)); 
     c92:	85 b3       	in	r24, 0x15	; 21
     c94:	8f 71       	andi	r24, 0x1F	; 31
     c96:	85 bb       	out	0x15, r24	; 21
			break;
		}
		
    }
	
	stepperR(1,500);
     c98:	64 ef       	ldi	r22, 0xF4	; 244
     c9a:	71 e0       	ldi	r23, 0x01	; 1
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <stepperR>
	
	 ControlPort|=(1<<gearMotor);
     ca2:	85 b3       	in	r24, 0x15	; 21
     ca4:	80 62       	ori	r24, 0x20	; 32
     ca6:	85 bb       	out	0x15, r24	; 21
     ca8:	2f ef       	ldi	r18, 0xFF	; 255
     caa:	49 e6       	ldi	r20, 0x69	; 105
     cac:	58 e1       	ldi	r21, 0x18	; 24
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	40 40       	sbci	r20, 0x00	; 0
     cb2:	50 40       	sbci	r21, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x1a2>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <main+0x1ac>
     cb8:	00 00       	nop
	 _delay_ms(1000);
	 ControlPort&=~(1<<gearMotor);
     cba:	85 b3       	in	r24, 0x15	; 21
     cbc:	8f 7d       	andi	r24, 0xDF	; 223
     cbe:	85 bb       	out	0x15, r24	; 21
	 stepperMotor(0,1000);
     cc0:	68 ee       	ldi	r22, 0xE8	; 232
     cc2:	73 e0       	ldi	r23, 0x03	; 3
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <stepperMotor>
	 //stepperR(0,1000);
	 	uint8_t breakv=0;
	/*A start*/
	while(1){
		breakv=0;
		getweight();
     cca:	0e 94 63 03 	call	0x6c6	; 0x6c6 <getweight>
		sprintf(lcddata,"limit   %1.3f kg",weightlimit);
     cce:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <weightlimit+0x1>
     cd2:	8f 93       	push	r24
     cd4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <weightlimit>
     cd8:	8f 93       	push	r24
     cda:	8b ef       	ldi	r24, 0xFB	; 251
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	8a e4       	ldi	r24, 0x4A	; 74
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
		LcdSetCursor(0,0,lcddata);
     cee:	4a e4       	ldi	r20, 0x4A	; 74
     cf0:	51 e0       	ldi	r21, 0x01	; 1
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
	 stepperMotor(0,1000);
	 //stepperR(0,1000);
	 	uint8_t breakv=0;
	/*A start*/
	while(1){
		breakv=0;
     d06:	e1 2c       	mov	r14, r1
		getweight();
		sprintf(lcddata,"limit   %1.3f kg",weightlimit);
		LcdSetCursor(0,0,lcddata);
		while(1){
			float readW=loadCellRead();
     d08:	0e 94 c6 04 	call	0x98c	; 0x98c <loadCellRead>
     d0c:	d6 2f       	mov	r29, r22
     d0e:	17 2f       	mov	r17, r23
     d10:	08 2f       	mov	r16, r24
     d12:	f9 2e       	mov	r15, r25
			sprintf(lcddata,"Reading %1.3f kg",readW);
     d14:	9f 93       	push	r25
     d16:	8f 93       	push	r24
     d18:	7f 93       	push	r23
     d1a:	6f 93       	push	r22
     d1c:	8c e0       	ldi	r24, 0x0C	; 12
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	8a e4       	ldi	r24, 0x4A	; 74
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	9f 93       	push	r25
     d2a:	8f 93       	push	r24
     d2c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sprintf>
			LcdSetCursor(0,1,lcddata);
     d30:	4a e4       	ldi	r20, 0x4A	; 74
     d32:	51 e0       	ldi	r21, 0x01	; 1
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
			
			for(uint8_t i=0;i<100;i++){
     d3c:	8d b7       	in	r24, 0x3d	; 61
     d3e:	9e b7       	in	r25, 0x3e	; 62
     d40:	08 96       	adiw	r24, 0x08	; 8
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	9e bf       	out	0x3e, r25	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	8d bf       	out	0x3d, r24	; 61
     d4c:	c0 e0       	ldi	r28, 0x00	; 0
     d4e:	38 c0       	rjmp	.+112    	; 0xdc0 <main+0x2b4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d50:	8f ec       	ldi	r24, 0xCF	; 207
     d52:	97 e0       	ldi	r25, 0x07	; 7
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <main+0x248>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <main+0x24e>
     d5a:	00 00       	nop
				_delay_us(1000);
				stepperE(0,1000);             ///////////////////////////////
     d5c:	68 ee       	ldi	r22, 0xE8	; 232
     d5e:	73 e0       	ldi	r23, 0x03	; 3
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 96 04 	call	0x92c	; 0x92c <stepperE>
				if (readW>=weightlimit)
     d66:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <weightlimit>
     d6a:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <weightlimit+0x1>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__floatunsisf>
     d76:	9b 01       	movw	r18, r22
     d78:	ac 01       	movw	r20, r24
     d7a:	6d 2f       	mov	r22, r29
     d7c:	71 2f       	mov	r23, r17
     d7e:	80 2f       	mov	r24, r16
     d80:	9f 2d       	mov	r25, r15
     d82:	0e 94 82 08 	call	0x1104	; 0x1104 <__gesf2>
     d86:	88 23       	and	r24, r24
     d88:	d4 f0       	brlt	.+52     	; 0xdbe <main+0x2b2>
				{LcdCommand(LCD_CLEARDISPLAY);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LcdCommand>
					LcdSetCursor(0,0,"Process done!");
     d90:	4d e1       	ldi	r20, 0x1D	; 29
     d92:	51 e0       	ldi	r21, 0x01	; 1
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	0e 94 3e 01 	call	0x27c	; 0x27c <LcdSetCursor>
					stepperE(0,500);
     d9c:	64 ef       	ldi	r22, 0xF4	; 244
     d9e:	71 e0       	ldi	r23, 0x01	; 1
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 96 04 	call	0x92c	; 0x92c <stepperE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     da6:	9f ef       	ldi	r25, 0xFF	; 255
     da8:	29 e6       	ldi	r18, 0x69	; 105
     daa:	48 e1       	ldi	r20, 0x18	; 24
     dac:	91 50       	subi	r25, 0x01	; 1
     dae:	20 40       	sbci	r18, 0x00	; 0
     db0:	40 40       	sbci	r20, 0x00	; 0
     db2:	e1 f7       	brne	.-8      	; 0xdac <main+0x2a0>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <main+0x2aa>
     db6:	00 00       	nop
					_delay_ms(1000);
					breakv=1;
     db8:	ee 24       	eor	r14, r14
     dba:	e3 94       	inc	r14
					break;
     dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <main+0x2b8>
		while(1){
			float readW=loadCellRead();
			sprintf(lcddata,"Reading %1.3f kg",readW);
			LcdSetCursor(0,1,lcddata);
			
			for(uint8_t i=0;i<100;i++){
     dbe:	cf 5f       	subi	r28, 0xFF	; 255
     dc0:	c4 36       	cpi	r28, 0x64	; 100
     dc2:	30 f2       	brcs	.-116    	; 0xd50 <main+0x244>
					breakv=1;
					break;
				}
			}
			
			if (breakv)
     dc4:	ee 20       	and	r14, r14
     dc6:	09 f4       	brne	.+2      	; 0xdca <main+0x2be>
     dc8:	9f cf       	rjmp	.-194    	; 0xd08 <main+0x1fc>
     dca:	7f cf       	rjmp	.-258    	; 0xcca <main+0x1be>

00000dcc <__subsf3>:
     dcc:	50 58       	subi	r21, 0x80	; 128

00000dce <__addsf3>:
     dce:	bb 27       	eor	r27, r27
     dd0:	aa 27       	eor	r26, r26
     dd2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__addsf3x>
     dd6:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_round>
     dda:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_pscA>
     dde:	38 f0       	brcs	.+14     	; 0xdee <__addsf3+0x20>
     de0:	0e 94 41 08 	call	0x1082	; 0x1082 <__fp_pscB>
     de4:	20 f0       	brcs	.+8      	; 0xdee <__addsf3+0x20>
     de6:	39 f4       	brne	.+14     	; 0xdf6 <__addsf3+0x28>
     de8:	9f 3f       	cpi	r25, 0xFF	; 255
     dea:	19 f4       	brne	.+6      	; 0xdf2 <__addsf3+0x24>
     dec:	26 f4       	brtc	.+8      	; 0xdf6 <__addsf3+0x28>
     dee:	0c 94 37 08 	jmp	0x106e	; 0x106e <__fp_nan>
     df2:	0e f4       	brtc	.+2      	; 0xdf6 <__addsf3+0x28>
     df4:	e0 95       	com	r30
     df6:	e7 fb       	bst	r30, 7
     df8:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_inf>

00000dfc <__addsf3x>:
     dfc:	e9 2f       	mov	r30, r25
     dfe:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_split3>
     e02:	58 f3       	brcs	.-42     	; 0xdda <__addsf3+0xc>
     e04:	ba 17       	cp	r27, r26
     e06:	62 07       	cpc	r22, r18
     e08:	73 07       	cpc	r23, r19
     e0a:	84 07       	cpc	r24, r20
     e0c:	95 07       	cpc	r25, r21
     e0e:	20 f0       	brcs	.+8      	; 0xe18 <__addsf3x+0x1c>
     e10:	79 f4       	brne	.+30     	; 0xe30 <__addsf3x+0x34>
     e12:	a6 f5       	brtc	.+104    	; 0xe7c <__addsf3x+0x80>
     e14:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_zero>
     e18:	0e f4       	brtc	.+2      	; 0xe1c <__addsf3x+0x20>
     e1a:	e0 95       	com	r30
     e1c:	0b 2e       	mov	r0, r27
     e1e:	ba 2f       	mov	r27, r26
     e20:	a0 2d       	mov	r26, r0
     e22:	0b 01       	movw	r0, r22
     e24:	b9 01       	movw	r22, r18
     e26:	90 01       	movw	r18, r0
     e28:	0c 01       	movw	r0, r24
     e2a:	ca 01       	movw	r24, r20
     e2c:	a0 01       	movw	r20, r0
     e2e:	11 24       	eor	r1, r1
     e30:	ff 27       	eor	r31, r31
     e32:	59 1b       	sub	r21, r25
     e34:	99 f0       	breq	.+38     	; 0xe5c <__addsf3x+0x60>
     e36:	59 3f       	cpi	r21, 0xF9	; 249
     e38:	50 f4       	brcc	.+20     	; 0xe4e <__addsf3x+0x52>
     e3a:	50 3e       	cpi	r21, 0xE0	; 224
     e3c:	68 f1       	brcs	.+90     	; 0xe98 <__addsf3x+0x9c>
     e3e:	1a 16       	cp	r1, r26
     e40:	f0 40       	sbci	r31, 0x00	; 0
     e42:	a2 2f       	mov	r26, r18
     e44:	23 2f       	mov	r18, r19
     e46:	34 2f       	mov	r19, r20
     e48:	44 27       	eor	r20, r20
     e4a:	58 5f       	subi	r21, 0xF8	; 248
     e4c:	f3 cf       	rjmp	.-26     	; 0xe34 <__addsf3x+0x38>
     e4e:	46 95       	lsr	r20
     e50:	37 95       	ror	r19
     e52:	27 95       	ror	r18
     e54:	a7 95       	ror	r26
     e56:	f0 40       	sbci	r31, 0x00	; 0
     e58:	53 95       	inc	r21
     e5a:	c9 f7       	brne	.-14     	; 0xe4e <__addsf3x+0x52>
     e5c:	7e f4       	brtc	.+30     	; 0xe7c <__addsf3x+0x80>
     e5e:	1f 16       	cp	r1, r31
     e60:	ba 0b       	sbc	r27, r26
     e62:	62 0b       	sbc	r22, r18
     e64:	73 0b       	sbc	r23, r19
     e66:	84 0b       	sbc	r24, r20
     e68:	ba f0       	brmi	.+46     	; 0xe98 <__addsf3x+0x9c>
     e6a:	91 50       	subi	r25, 0x01	; 1
     e6c:	a1 f0       	breq	.+40     	; 0xe96 <__addsf3x+0x9a>
     e6e:	ff 0f       	add	r31, r31
     e70:	bb 1f       	adc	r27, r27
     e72:	66 1f       	adc	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	c2 f7       	brpl	.-16     	; 0xe6a <__addsf3x+0x6e>
     e7a:	0e c0       	rjmp	.+28     	; 0xe98 <__addsf3x+0x9c>
     e7c:	ba 0f       	add	r27, r26
     e7e:	62 1f       	adc	r22, r18
     e80:	73 1f       	adc	r23, r19
     e82:	84 1f       	adc	r24, r20
     e84:	48 f4       	brcc	.+18     	; 0xe98 <__addsf3x+0x9c>
     e86:	87 95       	ror	r24
     e88:	77 95       	ror	r23
     e8a:	67 95       	ror	r22
     e8c:	b7 95       	ror	r27
     e8e:	f7 95       	ror	r31
     e90:	9e 3f       	cpi	r25, 0xFE	; 254
     e92:	08 f0       	brcs	.+2      	; 0xe96 <__addsf3x+0x9a>
     e94:	b0 cf       	rjmp	.-160    	; 0xdf6 <__addsf3+0x28>
     e96:	93 95       	inc	r25
     e98:	88 0f       	add	r24, r24
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <__addsf3x+0xa2>
     e9c:	99 27       	eor	r25, r25
     e9e:	ee 0f       	add	r30, r30
     ea0:	97 95       	ror	r25
     ea2:	87 95       	ror	r24
     ea4:	08 95       	ret

00000ea6 <__divsf3>:
     ea6:	0e 94 67 07 	call	0xece	; 0xece <__divsf3x>
     eaa:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_round>
     eae:	0e 94 41 08 	call	0x1082	; 0x1082 <__fp_pscB>
     eb2:	58 f0       	brcs	.+22     	; 0xeca <__divsf3+0x24>
     eb4:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_pscA>
     eb8:	40 f0       	brcs	.+16     	; 0xeca <__divsf3+0x24>
     eba:	29 f4       	brne	.+10     	; 0xec6 <__divsf3+0x20>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	29 f0       	breq	.+10     	; 0xeca <__divsf3+0x24>
     ec0:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_inf>
     ec4:	51 11       	cpse	r21, r1
     ec6:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__fp_szero>
     eca:	0c 94 37 08 	jmp	0x106e	; 0x106e <__fp_nan>

00000ece <__divsf3x>:
     ece:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_split3>
     ed2:	68 f3       	brcs	.-38     	; 0xeae <__divsf3+0x8>

00000ed4 <__divsf3_pse>:
     ed4:	99 23       	and	r25, r25
     ed6:	b1 f3       	breq	.-20     	; 0xec4 <__divsf3+0x1e>
     ed8:	55 23       	and	r21, r21
     eda:	91 f3       	breq	.-28     	; 0xec0 <__divsf3+0x1a>
     edc:	95 1b       	sub	r25, r21
     ede:	55 0b       	sbc	r21, r21
     ee0:	bb 27       	eor	r27, r27
     ee2:	aa 27       	eor	r26, r26
     ee4:	62 17       	cp	r22, r18
     ee6:	73 07       	cpc	r23, r19
     ee8:	84 07       	cpc	r24, r20
     eea:	38 f0       	brcs	.+14     	; 0xefa <__divsf3_pse+0x26>
     eec:	9f 5f       	subi	r25, 0xFF	; 255
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	44 1f       	adc	r20, r20
     ef6:	aa 1f       	adc	r26, r26
     ef8:	a9 f3       	breq	.-22     	; 0xee4 <__divsf3_pse+0x10>
     efa:	35 d0       	rcall	.+106    	; 0xf66 <__divsf3_pse+0x92>
     efc:	0e 2e       	mov	r0, r30
     efe:	3a f0       	brmi	.+14     	; 0xf0e <__divsf3_pse+0x3a>
     f00:	e0 e8       	ldi	r30, 0x80	; 128
     f02:	32 d0       	rcall	.+100    	; 0xf68 <__divsf3_pse+0x94>
     f04:	91 50       	subi	r25, 0x01	; 1
     f06:	50 40       	sbci	r21, 0x00	; 0
     f08:	e6 95       	lsr	r30
     f0a:	00 1c       	adc	r0, r0
     f0c:	ca f7       	brpl	.-14     	; 0xf00 <__divsf3_pse+0x2c>
     f0e:	2b d0       	rcall	.+86     	; 0xf66 <__divsf3_pse+0x92>
     f10:	fe 2f       	mov	r31, r30
     f12:	29 d0       	rcall	.+82     	; 0xf66 <__divsf3_pse+0x92>
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	bb 1f       	adc	r27, r27
     f1c:	26 17       	cp	r18, r22
     f1e:	37 07       	cpc	r19, r23
     f20:	48 07       	cpc	r20, r24
     f22:	ab 07       	cpc	r26, r27
     f24:	b0 e8       	ldi	r27, 0x80	; 128
     f26:	09 f0       	breq	.+2      	; 0xf2a <__divsf3_pse+0x56>
     f28:	bb 0b       	sbc	r27, r27
     f2a:	80 2d       	mov	r24, r0
     f2c:	bf 01       	movw	r22, r30
     f2e:	ff 27       	eor	r31, r31
     f30:	93 58       	subi	r25, 0x83	; 131
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	3a f0       	brmi	.+14     	; 0xf44 <__divsf3_pse+0x70>
     f36:	9e 3f       	cpi	r25, 0xFE	; 254
     f38:	51 05       	cpc	r21, r1
     f3a:	78 f0       	brcs	.+30     	; 0xf5a <__divsf3_pse+0x86>
     f3c:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_inf>
     f40:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__fp_szero>
     f44:	5f 3f       	cpi	r21, 0xFF	; 255
     f46:	e4 f3       	brlt	.-8      	; 0xf40 <__divsf3_pse+0x6c>
     f48:	98 3e       	cpi	r25, 0xE8	; 232
     f4a:	d4 f3       	brlt	.-12     	; 0xf40 <__divsf3_pse+0x6c>
     f4c:	86 95       	lsr	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f7 95       	ror	r31
     f56:	9f 5f       	subi	r25, 0xFF	; 255
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__divsf3_pse+0x78>
     f5a:	88 0f       	add	r24, r24
     f5c:	91 1d       	adc	r25, r1
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret
     f66:	e1 e0       	ldi	r30, 0x01	; 1
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	bb 1f       	adc	r27, r27
     f70:	62 17       	cp	r22, r18
     f72:	73 07       	cpc	r23, r19
     f74:	84 07       	cpc	r24, r20
     f76:	ba 07       	cpc	r27, r26
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__divsf3_pse+0xae>
     f7a:	62 1b       	sub	r22, r18
     f7c:	73 0b       	sbc	r23, r19
     f7e:	84 0b       	sbc	r24, r20
     f80:	ba 0b       	sbc	r27, r26
     f82:	ee 1f       	adc	r30, r30
     f84:	88 f7       	brcc	.-30     	; 0xf68 <__divsf3_pse+0x94>
     f86:	e0 95       	com	r30
     f88:	08 95       	ret

00000f8a <__fixunssfsi>:
     f8a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fp_splitA>
     f8e:	88 f0       	brcs	.+34     	; 0xfb2 <__fixunssfsi+0x28>
     f90:	9f 57       	subi	r25, 0x7F	; 127
     f92:	98 f0       	brcs	.+38     	; 0xfba <__fixunssfsi+0x30>
     f94:	b9 2f       	mov	r27, r25
     f96:	99 27       	eor	r25, r25
     f98:	b7 51       	subi	r27, 0x17	; 23
     f9a:	b0 f0       	brcs	.+44     	; 0xfc8 <__fixunssfsi+0x3e>
     f9c:	e1 f0       	breq	.+56     	; 0xfd6 <__fixunssfsi+0x4c>
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	1a f0       	brmi	.+6      	; 0xfae <__fixunssfsi+0x24>
     fa8:	ba 95       	dec	r27
     faa:	c9 f7       	brne	.-14     	; 0xf9e <__fixunssfsi+0x14>
     fac:	14 c0       	rjmp	.+40     	; 0xfd6 <__fixunssfsi+0x4c>
     fae:	b1 30       	cpi	r27, 0x01	; 1
     fb0:	91 f0       	breq	.+36     	; 0xfd6 <__fixunssfsi+0x4c>
     fb2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__fp_zero>
     fb6:	b1 e0       	ldi	r27, 0x01	; 1
     fb8:	08 95       	ret
     fba:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_zero>
     fbe:	67 2f       	mov	r22, r23
     fc0:	78 2f       	mov	r23, r24
     fc2:	88 27       	eor	r24, r24
     fc4:	b8 5f       	subi	r27, 0xF8	; 248
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <__fixunssfsi+0x4c>
     fc8:	b9 3f       	cpi	r27, 0xF9	; 249
     fca:	cc f3       	brlt	.-14     	; 0xfbe <__fixunssfsi+0x34>
     fcc:	86 95       	lsr	r24
     fce:	77 95       	ror	r23
     fd0:	67 95       	ror	r22
     fd2:	b3 95       	inc	r27
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <__fixunssfsi+0x42>
     fd6:	3e f4       	brtc	.+14     	; 0xfe6 <__fixunssfsi+0x5c>
     fd8:	90 95       	com	r25
     fda:	80 95       	com	r24
     fdc:	70 95       	com	r23
     fde:	61 95       	neg	r22
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	08 95       	ret

00000fe8 <__floatunsisf>:
     fe8:	e8 94       	clt
     fea:	09 c0       	rjmp	.+18     	; 0xffe <__floatsisf+0x12>

00000fec <__floatsisf>:
     fec:	97 fb       	bst	r25, 7
     fee:	3e f4       	brtc	.+14     	; 0xffe <__floatsisf+0x12>
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	99 23       	and	r25, r25
    1000:	a9 f0       	breq	.+42     	; 0x102c <__floatsisf+0x40>
    1002:	f9 2f       	mov	r31, r25
    1004:	96 e9       	ldi	r25, 0x96	; 150
    1006:	bb 27       	eor	r27, r27
    1008:	93 95       	inc	r25
    100a:	f6 95       	lsr	r31
    100c:	87 95       	ror	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	f1 11       	cpse	r31, r1
    1016:	f8 cf       	rjmp	.-16     	; 0x1008 <__floatsisf+0x1c>
    1018:	fa f4       	brpl	.+62     	; 0x1058 <__floatsisf+0x6c>
    101a:	bb 0f       	add	r27, r27
    101c:	11 f4       	brne	.+4      	; 0x1022 <__floatsisf+0x36>
    101e:	60 ff       	sbrs	r22, 0
    1020:	1b c0       	rjmp	.+54     	; 0x1058 <__floatsisf+0x6c>
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <__floatsisf+0x6c>
    102c:	88 23       	and	r24, r24
    102e:	11 f0       	breq	.+4      	; 0x1034 <__floatsisf+0x48>
    1030:	96 e9       	ldi	r25, 0x96	; 150
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <__floatsisf+0x6a>
    1034:	77 23       	and	r23, r23
    1036:	21 f0       	breq	.+8      	; 0x1040 <__floatsisf+0x54>
    1038:	9e e8       	ldi	r25, 0x8E	; 142
    103a:	87 2f       	mov	r24, r23
    103c:	76 2f       	mov	r23, r22
    103e:	05 c0       	rjmp	.+10     	; 0x104a <__floatsisf+0x5e>
    1040:	66 23       	and	r22, r22
    1042:	71 f0       	breq	.+28     	; 0x1060 <__floatsisf+0x74>
    1044:	96 e8       	ldi	r25, 0x86	; 134
    1046:	86 2f       	mov	r24, r22
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	2a f0       	brmi	.+10     	; 0x1058 <__floatsisf+0x6c>
    104e:	9a 95       	dec	r25
    1050:	66 0f       	add	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	da f7       	brpl	.-10     	; 0x104e <__floatsisf+0x62>
    1058:	88 0f       	add	r24, r24
    105a:	96 95       	lsr	r25
    105c:	87 95       	ror	r24
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret

00001062 <__fp_inf>:
    1062:	97 f9       	bld	r25, 7
    1064:	9f 67       	ori	r25, 0x7F	; 127
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	08 95       	ret

0000106e <__fp_nan>:
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	80 ec       	ldi	r24, 0xC0	; 192
    1072:	08 95       	ret

00001074 <__fp_pscA>:
    1074:	00 24       	eor	r0, r0
    1076:	0a 94       	dec	r0
    1078:	16 16       	cp	r1, r22
    107a:	17 06       	cpc	r1, r23
    107c:	18 06       	cpc	r1, r24
    107e:	09 06       	cpc	r0, r25
    1080:	08 95       	ret

00001082 <__fp_pscB>:
    1082:	00 24       	eor	r0, r0
    1084:	0a 94       	dec	r0
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	14 06       	cpc	r1, r20
    108c:	05 06       	cpc	r0, r21
    108e:	08 95       	ret

00001090 <__fp_round>:
    1090:	09 2e       	mov	r0, r25
    1092:	03 94       	inc	r0
    1094:	00 0c       	add	r0, r0
    1096:	11 f4       	brne	.+4      	; 0x109c <__fp_round+0xc>
    1098:	88 23       	and	r24, r24
    109a:	52 f0       	brmi	.+20     	; 0x10b0 <__fp_round+0x20>
    109c:	bb 0f       	add	r27, r27
    109e:	40 f4       	brcc	.+16     	; 0x10b0 <__fp_round+0x20>
    10a0:	bf 2b       	or	r27, r31
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <__fp_round+0x18>
    10a4:	60 ff       	sbrs	r22, 0
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <__fp_round+0x20>
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	08 95       	ret

000010b2 <__fp_split3>:
    10b2:	57 fd       	sbrc	r21, 7
    10b4:	90 58       	subi	r25, 0x80	; 128
    10b6:	44 0f       	add	r20, r20
    10b8:	55 1f       	adc	r21, r21
    10ba:	59 f0       	breq	.+22     	; 0x10d2 <__fp_splitA+0x10>
    10bc:	5f 3f       	cpi	r21, 0xFF	; 255
    10be:	71 f0       	breq	.+28     	; 0x10dc <__fp_splitA+0x1a>
    10c0:	47 95       	ror	r20

000010c2 <__fp_splitA>:
    10c2:	88 0f       	add	r24, r24
    10c4:	97 fb       	bst	r25, 7
    10c6:	99 1f       	adc	r25, r25
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <__fp_splitA+0x20>
    10ca:	9f 3f       	cpi	r25, 0xFF	; 255
    10cc:	79 f0       	breq	.+30     	; 0x10ec <__fp_splitA+0x2a>
    10ce:	87 95       	ror	r24
    10d0:	08 95       	ret
    10d2:	12 16       	cp	r1, r18
    10d4:	13 06       	cpc	r1, r19
    10d6:	14 06       	cpc	r1, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	f2 cf       	rjmp	.-28     	; 0x10c0 <__fp_split3+0xe>
    10dc:	46 95       	lsr	r20
    10de:	f1 df       	rcall	.-30     	; 0x10c2 <__fp_splitA>
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <__fp_splitA+0x30>
    10e2:	16 16       	cp	r1, r22
    10e4:	17 06       	cpc	r1, r23
    10e6:	18 06       	cpc	r1, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	f1 cf       	rjmp	.-30     	; 0x10ce <__fp_splitA+0xc>
    10ec:	86 95       	lsr	r24
    10ee:	71 05       	cpc	r23, r1
    10f0:	61 05       	cpc	r22, r1
    10f2:	08 94       	sec
    10f4:	08 95       	ret

000010f6 <__fp_zero>:
    10f6:	e8 94       	clt

000010f8 <__fp_szero>:
    10f8:	bb 27       	eor	r27, r27
    10fa:	66 27       	eor	r22, r22
    10fc:	77 27       	eor	r23, r23
    10fe:	cb 01       	movw	r24, r22
    1100:	97 f9       	bld	r25, 7
    1102:	08 95       	ret

00001104 <__gesf2>:
    1104:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__fp_cmp>
    1108:	08 f4       	brcc	.+2      	; 0x110c <__gesf2+0x8>
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	08 95       	ret

0000110e <__mulsf3>:
    110e:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3x>
    1112:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_round>
    1116:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_pscA>
    111a:	38 f0       	brcs	.+14     	; 0x112a <__mulsf3+0x1c>
    111c:	0e 94 41 08 	call	0x1082	; 0x1082 <__fp_pscB>
    1120:	20 f0       	brcs	.+8      	; 0x112a <__mulsf3+0x1c>
    1122:	95 23       	and	r25, r21
    1124:	11 f0       	breq	.+4      	; 0x112a <__mulsf3+0x1c>
    1126:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_inf>
    112a:	0c 94 37 08 	jmp	0x106e	; 0x106e <__fp_nan>
    112e:	11 24       	eor	r1, r1
    1130:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__fp_szero>

00001134 <__mulsf3x>:
    1134:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_split3>
    1138:	70 f3       	brcs	.-36     	; 0x1116 <__mulsf3+0x8>

0000113a <__mulsf3_pse>:
    113a:	95 9f       	mul	r25, r21
    113c:	c1 f3       	breq	.-16     	; 0x112e <__mulsf3+0x20>
    113e:	95 0f       	add	r25, r21
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	55 1f       	adc	r21, r21
    1144:	62 9f       	mul	r22, r18
    1146:	f0 01       	movw	r30, r0
    1148:	72 9f       	mul	r23, r18
    114a:	bb 27       	eor	r27, r27
    114c:	f0 0d       	add	r31, r0
    114e:	b1 1d       	adc	r27, r1
    1150:	63 9f       	mul	r22, r19
    1152:	aa 27       	eor	r26, r26
    1154:	f0 0d       	add	r31, r0
    1156:	b1 1d       	adc	r27, r1
    1158:	aa 1f       	adc	r26, r26
    115a:	64 9f       	mul	r22, r20
    115c:	66 27       	eor	r22, r22
    115e:	b0 0d       	add	r27, r0
    1160:	a1 1d       	adc	r26, r1
    1162:	66 1f       	adc	r22, r22
    1164:	82 9f       	mul	r24, r18
    1166:	22 27       	eor	r18, r18
    1168:	b0 0d       	add	r27, r0
    116a:	a1 1d       	adc	r26, r1
    116c:	62 1f       	adc	r22, r18
    116e:	73 9f       	mul	r23, r19
    1170:	b0 0d       	add	r27, r0
    1172:	a1 1d       	adc	r26, r1
    1174:	62 1f       	adc	r22, r18
    1176:	83 9f       	mul	r24, r19
    1178:	a0 0d       	add	r26, r0
    117a:	61 1d       	adc	r22, r1
    117c:	22 1f       	adc	r18, r18
    117e:	74 9f       	mul	r23, r20
    1180:	33 27       	eor	r19, r19
    1182:	a0 0d       	add	r26, r0
    1184:	61 1d       	adc	r22, r1
    1186:	23 1f       	adc	r18, r19
    1188:	84 9f       	mul	r24, r20
    118a:	60 0d       	add	r22, r0
    118c:	21 1d       	adc	r18, r1
    118e:	82 2f       	mov	r24, r18
    1190:	76 2f       	mov	r23, r22
    1192:	6a 2f       	mov	r22, r26
    1194:	11 24       	eor	r1, r1
    1196:	9f 57       	subi	r25, 0x7F	; 127
    1198:	50 40       	sbci	r21, 0x00	; 0
    119a:	9a f0       	brmi	.+38     	; 0x11c2 <__mulsf3_pse+0x88>
    119c:	f1 f0       	breq	.+60     	; 0x11da <__mulsf3_pse+0xa0>
    119e:	88 23       	and	r24, r24
    11a0:	4a f0       	brmi	.+18     	; 0x11b4 <__mulsf3_pse+0x7a>
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	bb 1f       	adc	r27, r27
    11a8:	66 1f       	adc	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	91 50       	subi	r25, 0x01	; 1
    11b0:	50 40       	sbci	r21, 0x00	; 0
    11b2:	a9 f7       	brne	.-22     	; 0x119e <__mulsf3_pse+0x64>
    11b4:	9e 3f       	cpi	r25, 0xFE	; 254
    11b6:	51 05       	cpc	r21, r1
    11b8:	80 f0       	brcs	.+32     	; 0x11da <__mulsf3_pse+0xa0>
    11ba:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_inf>
    11be:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__fp_szero>
    11c2:	5f 3f       	cpi	r21, 0xFF	; 255
    11c4:	e4 f3       	brlt	.-8      	; 0x11be <__mulsf3_pse+0x84>
    11c6:	98 3e       	cpi	r25, 0xE8	; 232
    11c8:	d4 f3       	brlt	.-12     	; 0x11be <__mulsf3_pse+0x84>
    11ca:	86 95       	lsr	r24
    11cc:	77 95       	ror	r23
    11ce:	67 95       	ror	r22
    11d0:	b7 95       	ror	r27
    11d2:	f7 95       	ror	r31
    11d4:	e7 95       	ror	r30
    11d6:	9f 5f       	subi	r25, 0xFF	; 255
    11d8:	c1 f7       	brne	.-16     	; 0x11ca <__mulsf3_pse+0x90>
    11da:	fe 2b       	or	r31, r30
    11dc:	88 0f       	add	r24, r24
    11de:	91 1d       	adc	r25, r1
    11e0:	96 95       	lsr	r25
    11e2:	87 95       	ror	r24
    11e4:	97 f9       	bld	r25, 7
    11e6:	08 95       	ret

000011e8 <__fp_cmp>:
    11e8:	99 0f       	add	r25, r25
    11ea:	00 08       	sbc	r0, r0
    11ec:	55 0f       	add	r21, r21
    11ee:	aa 0b       	sbc	r26, r26
    11f0:	e0 e8       	ldi	r30, 0x80	; 128
    11f2:	fe ef       	ldi	r31, 0xFE	; 254
    11f4:	16 16       	cp	r1, r22
    11f6:	17 06       	cpc	r1, r23
    11f8:	e8 07       	cpc	r30, r24
    11fa:	f9 07       	cpc	r31, r25
    11fc:	c0 f0       	brcs	.+48     	; 0x122e <__fp_cmp+0x46>
    11fe:	12 16       	cp	r1, r18
    1200:	13 06       	cpc	r1, r19
    1202:	e4 07       	cpc	r30, r20
    1204:	f5 07       	cpc	r31, r21
    1206:	98 f0       	brcs	.+38     	; 0x122e <__fp_cmp+0x46>
    1208:	62 1b       	sub	r22, r18
    120a:	73 0b       	sbc	r23, r19
    120c:	84 0b       	sbc	r24, r20
    120e:	95 0b       	sbc	r25, r21
    1210:	39 f4       	brne	.+14     	; 0x1220 <__fp_cmp+0x38>
    1212:	0a 26       	eor	r0, r26
    1214:	61 f0       	breq	.+24     	; 0x122e <__fp_cmp+0x46>
    1216:	23 2b       	or	r18, r19
    1218:	24 2b       	or	r18, r20
    121a:	25 2b       	or	r18, r21
    121c:	21 f4       	brne	.+8      	; 0x1226 <__fp_cmp+0x3e>
    121e:	08 95       	ret
    1220:	0a 26       	eor	r0, r26
    1222:	09 f4       	brne	.+2      	; 0x1226 <__fp_cmp+0x3e>
    1224:	a1 40       	sbci	r26, 0x01	; 1
    1226:	a6 95       	lsr	r26
    1228:	8f ef       	ldi	r24, 0xFF	; 255
    122a:	81 1d       	adc	r24, r1
    122c:	81 1d       	adc	r24, r1
    122e:	08 95       	ret

00001230 <vfprintf>:
    1230:	a0 e1       	ldi	r26, 0x10	; 16
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ee e1       	ldi	r30, 0x1E	; 30
    1236:	f9 e0       	ldi	r31, 0x09	; 9
    1238:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__prologue_saves__>
    123c:	7c 01       	movw	r14, r24
    123e:	1b 01       	movw	r2, r22
    1240:	6a 01       	movw	r12, r20
    1242:	fc 01       	movw	r30, r24
    1244:	17 82       	std	Z+7, r1	; 0x07
    1246:	16 82       	std	Z+6, r1	; 0x06
    1248:	83 81       	ldd	r24, Z+3	; 0x03
    124a:	81 ff       	sbrs	r24, 1
    124c:	44 c3       	rjmp	.+1672   	; 0x18d6 <vfprintf+0x6a6>
    124e:	9e 01       	movw	r18, r28
    1250:	2f 5f       	subi	r18, 0xFF	; 255
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	39 01       	movw	r6, r18
    1256:	f7 01       	movw	r30, r14
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	f1 01       	movw	r30, r2
    125c:	93 fd       	sbrc	r25, 3
    125e:	85 91       	lpm	r24, Z+
    1260:	93 ff       	sbrs	r25, 3
    1262:	81 91       	ld	r24, Z+
    1264:	1f 01       	movw	r2, r30
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <vfprintf+0x3c>
    126a:	31 c3       	rjmp	.+1634   	; 0x18ce <vfprintf+0x69e>
    126c:	85 32       	cpi	r24, 0x25	; 37
    126e:	39 f4       	brne	.+14     	; 0x127e <vfprintf+0x4e>
    1270:	93 fd       	sbrc	r25, 3
    1272:	85 91       	lpm	r24, Z+
    1274:	93 ff       	sbrs	r25, 3
    1276:	81 91       	ld	r24, Z+
    1278:	1f 01       	movw	r2, r30
    127a:	85 32       	cpi	r24, 0x25	; 37
    127c:	39 f4       	brne	.+14     	; 0x128c <vfprintf+0x5c>
    127e:	b7 01       	movw	r22, r14
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1286:	56 01       	movw	r10, r12
    1288:	65 01       	movw	r12, r10
    128a:	e5 cf       	rjmp	.-54     	; 0x1256 <vfprintf+0x26>
    128c:	10 e0       	ldi	r17, 0x00	; 0
    128e:	51 2c       	mov	r5, r1
    1290:	91 2c       	mov	r9, r1
    1292:	ff e1       	ldi	r31, 0x1F	; 31
    1294:	f9 15       	cp	r31, r9
    1296:	d8 f0       	brcs	.+54     	; 0x12ce <vfprintf+0x9e>
    1298:	8b 32       	cpi	r24, 0x2B	; 43
    129a:	79 f0       	breq	.+30     	; 0x12ba <vfprintf+0x8a>
    129c:	38 f4       	brcc	.+14     	; 0x12ac <vfprintf+0x7c>
    129e:	80 32       	cpi	r24, 0x20	; 32
    12a0:	79 f0       	breq	.+30     	; 0x12c0 <vfprintf+0x90>
    12a2:	83 32       	cpi	r24, 0x23	; 35
    12a4:	a1 f4       	brne	.+40     	; 0x12ce <vfprintf+0x9e>
    12a6:	f9 2d       	mov	r31, r9
    12a8:	f0 61       	ori	r31, 0x10	; 16
    12aa:	2e c0       	rjmp	.+92     	; 0x1308 <vfprintf+0xd8>
    12ac:	8d 32       	cpi	r24, 0x2D	; 45
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <vfprintf+0x98>
    12b0:	80 33       	cpi	r24, 0x30	; 48
    12b2:	69 f4       	brne	.+26     	; 0x12ce <vfprintf+0x9e>
    12b4:	29 2d       	mov	r18, r9
    12b6:	21 60       	ori	r18, 0x01	; 1
    12b8:	2d c0       	rjmp	.+90     	; 0x1314 <vfprintf+0xe4>
    12ba:	39 2d       	mov	r19, r9
    12bc:	32 60       	ori	r19, 0x02	; 2
    12be:	93 2e       	mov	r9, r19
    12c0:	89 2d       	mov	r24, r9
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	98 2e       	mov	r9, r24
    12c6:	2a c0       	rjmp	.+84     	; 0x131c <vfprintf+0xec>
    12c8:	e9 2d       	mov	r30, r9
    12ca:	e8 60       	ori	r30, 0x08	; 8
    12cc:	15 c0       	rjmp	.+42     	; 0x12f8 <vfprintf+0xc8>
    12ce:	97 fc       	sbrc	r9, 7
    12d0:	2d c0       	rjmp	.+90     	; 0x132c <vfprintf+0xfc>
    12d2:	20 ed       	ldi	r18, 0xD0	; 208
    12d4:	28 0f       	add	r18, r24
    12d6:	2a 30       	cpi	r18, 0x0A	; 10
    12d8:	88 f4       	brcc	.+34     	; 0x12fc <vfprintf+0xcc>
    12da:	96 fe       	sbrs	r9, 6
    12dc:	06 c0       	rjmp	.+12     	; 0x12ea <vfprintf+0xba>
    12de:	3a e0       	ldi	r19, 0x0A	; 10
    12e0:	13 9f       	mul	r17, r19
    12e2:	20 0d       	add	r18, r0
    12e4:	11 24       	eor	r1, r1
    12e6:	12 2f       	mov	r17, r18
    12e8:	19 c0       	rjmp	.+50     	; 0x131c <vfprintf+0xec>
    12ea:	8a e0       	ldi	r24, 0x0A	; 10
    12ec:	58 9e       	mul	r5, r24
    12ee:	20 0d       	add	r18, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	52 2e       	mov	r5, r18
    12f4:	e9 2d       	mov	r30, r9
    12f6:	e0 62       	ori	r30, 0x20	; 32
    12f8:	9e 2e       	mov	r9, r30
    12fa:	10 c0       	rjmp	.+32     	; 0x131c <vfprintf+0xec>
    12fc:	8e 32       	cpi	r24, 0x2E	; 46
    12fe:	31 f4       	brne	.+12     	; 0x130c <vfprintf+0xdc>
    1300:	96 fc       	sbrc	r9, 6
    1302:	e5 c2       	rjmp	.+1482   	; 0x18ce <vfprintf+0x69e>
    1304:	f9 2d       	mov	r31, r9
    1306:	f0 64       	ori	r31, 0x40	; 64
    1308:	9f 2e       	mov	r9, r31
    130a:	08 c0       	rjmp	.+16     	; 0x131c <vfprintf+0xec>
    130c:	8c 36       	cpi	r24, 0x6C	; 108
    130e:	21 f4       	brne	.+8      	; 0x1318 <vfprintf+0xe8>
    1310:	29 2d       	mov	r18, r9
    1312:	20 68       	ori	r18, 0x80	; 128
    1314:	92 2e       	mov	r9, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <vfprintf+0xec>
    1318:	88 36       	cpi	r24, 0x68	; 104
    131a:	41 f4       	brne	.+16     	; 0x132c <vfprintf+0xfc>
    131c:	f1 01       	movw	r30, r2
    131e:	93 fd       	sbrc	r25, 3
    1320:	85 91       	lpm	r24, Z+
    1322:	93 ff       	sbrs	r25, 3
    1324:	81 91       	ld	r24, Z+
    1326:	1f 01       	movw	r2, r30
    1328:	81 11       	cpse	r24, r1
    132a:	b3 cf       	rjmp	.-154    	; 0x1292 <vfprintf+0x62>
    132c:	9b eb       	ldi	r25, 0xBB	; 187
    132e:	98 0f       	add	r25, r24
    1330:	93 30       	cpi	r25, 0x03	; 3
    1332:	20 f4       	brcc	.+8      	; 0x133c <vfprintf+0x10c>
    1334:	99 2d       	mov	r25, r9
    1336:	90 61       	ori	r25, 0x10	; 16
    1338:	80 5e       	subi	r24, 0xE0	; 224
    133a:	07 c0       	rjmp	.+14     	; 0x134a <vfprintf+0x11a>
    133c:	9b e9       	ldi	r25, 0x9B	; 155
    133e:	98 0f       	add	r25, r24
    1340:	93 30       	cpi	r25, 0x03	; 3
    1342:	08 f0       	brcs	.+2      	; 0x1346 <vfprintf+0x116>
    1344:	66 c1       	rjmp	.+716    	; 0x1612 <vfprintf+0x3e2>
    1346:	99 2d       	mov	r25, r9
    1348:	9f 7e       	andi	r25, 0xEF	; 239
    134a:	96 ff       	sbrs	r25, 6
    134c:	16 e0       	ldi	r17, 0x06	; 6
    134e:	9f 73       	andi	r25, 0x3F	; 63
    1350:	99 2e       	mov	r9, r25
    1352:	85 36       	cpi	r24, 0x65	; 101
    1354:	19 f4       	brne	.+6      	; 0x135c <vfprintf+0x12c>
    1356:	90 64       	ori	r25, 0x40	; 64
    1358:	99 2e       	mov	r9, r25
    135a:	08 c0       	rjmp	.+16     	; 0x136c <vfprintf+0x13c>
    135c:	86 36       	cpi	r24, 0x66	; 102
    135e:	21 f4       	brne	.+8      	; 0x1368 <vfprintf+0x138>
    1360:	39 2f       	mov	r19, r25
    1362:	30 68       	ori	r19, 0x80	; 128
    1364:	93 2e       	mov	r9, r19
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x13c>
    1368:	11 11       	cpse	r17, r1
    136a:	11 50       	subi	r17, 0x01	; 1
    136c:	97 fe       	sbrs	r9, 7
    136e:	07 c0       	rjmp	.+14     	; 0x137e <vfprintf+0x14e>
    1370:	1c 33       	cpi	r17, 0x3C	; 60
    1372:	50 f4       	brcc	.+20     	; 0x1388 <vfprintf+0x158>
    1374:	44 24       	eor	r4, r4
    1376:	43 94       	inc	r4
    1378:	41 0e       	add	r4, r17
    137a:	27 e0       	ldi	r18, 0x07	; 7
    137c:	0b c0       	rjmp	.+22     	; 0x1394 <vfprintf+0x164>
    137e:	18 30       	cpi	r17, 0x08	; 8
    1380:	38 f0       	brcs	.+14     	; 0x1390 <vfprintf+0x160>
    1382:	27 e0       	ldi	r18, 0x07	; 7
    1384:	17 e0       	ldi	r17, 0x07	; 7
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <vfprintf+0x162>
    1388:	27 e0       	ldi	r18, 0x07	; 7
    138a:	9c e3       	ldi	r25, 0x3C	; 60
    138c:	49 2e       	mov	r4, r25
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x164>
    1390:	21 2f       	mov	r18, r17
    1392:	41 2c       	mov	r4, r1
    1394:	56 01       	movw	r10, r12
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	a8 0e       	add	r10, r24
    139a:	b1 1c       	adc	r11, r1
    139c:	f6 01       	movw	r30, r12
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	04 2d       	mov	r16, r4
    13a8:	a3 01       	movw	r20, r6
    13aa:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__ftoa_engine>
    13ae:	6c 01       	movw	r12, r24
    13b0:	f9 81       	ldd	r31, Y+1	; 0x01
    13b2:	fc 87       	std	Y+12, r31	; 0x0c
    13b4:	f0 ff       	sbrs	r31, 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vfprintf+0x18c>
    13b8:	f3 ff       	sbrs	r31, 3
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <vfprintf+0x198>
    13bc:	91 fc       	sbrc	r9, 1
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <vfprintf+0x19c>
    13c0:	92 fe       	sbrs	r9, 2
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <vfprintf+0x1a0>
    13c4:	00 e2       	ldi	r16, 0x20	; 32
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <vfprintf+0x1a2>
    13c8:	0d e2       	ldi	r16, 0x2D	; 45
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <vfprintf+0x1a2>
    13cc:	0b e2       	ldi	r16, 0x2B	; 43
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <vfprintf+0x1a2>
    13d0:	00 e0       	ldi	r16, 0x00	; 0
    13d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d4:	8c 70       	andi	r24, 0x0C	; 12
    13d6:	19 f0       	breq	.+6      	; 0x13de <vfprintf+0x1ae>
    13d8:	01 11       	cpse	r16, r1
    13da:	5a c2       	rjmp	.+1204   	; 0x1890 <vfprintf+0x660>
    13dc:	9b c2       	rjmp	.+1334   	; 0x1914 <vfprintf+0x6e4>
    13de:	97 fe       	sbrs	r9, 7
    13e0:	10 c0       	rjmp	.+32     	; 0x1402 <vfprintf+0x1d2>
    13e2:	4c 0c       	add	r4, r12
    13e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    13e6:	f4 ff       	sbrs	r31, 4
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <vfprintf+0x1c2>
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	81 33       	cpi	r24, 0x31	; 49
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <vfprintf+0x1c2>
    13f0:	4a 94       	dec	r4
    13f2:	14 14       	cp	r1, r4
    13f4:	74 f5       	brge	.+92     	; 0x1452 <vfprintf+0x222>
    13f6:	28 e0       	ldi	r18, 0x08	; 8
    13f8:	24 15       	cp	r18, r4
    13fa:	78 f5       	brcc	.+94     	; 0x145a <vfprintf+0x22a>
    13fc:	88 e0       	ldi	r24, 0x08	; 8
    13fe:	48 2e       	mov	r4, r24
    1400:	2c c0       	rjmp	.+88     	; 0x145a <vfprintf+0x22a>
    1402:	96 fc       	sbrc	r9, 6
    1404:	2a c0       	rjmp	.+84     	; 0x145a <vfprintf+0x22a>
    1406:	81 2f       	mov	r24, r17
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	8c 15       	cp	r24, r12
    140c:	9d 05       	cpc	r25, r13
    140e:	9c f0       	brlt	.+38     	; 0x1436 <vfprintf+0x206>
    1410:	3c ef       	ldi	r19, 0xFC	; 252
    1412:	c3 16       	cp	r12, r19
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	d3 06       	cpc	r13, r19
    1418:	74 f0       	brlt	.+28     	; 0x1436 <vfprintf+0x206>
    141a:	89 2d       	mov	r24, r9
    141c:	80 68       	ori	r24, 0x80	; 128
    141e:	98 2e       	mov	r9, r24
    1420:	0a c0       	rjmp	.+20     	; 0x1436 <vfprintf+0x206>
    1422:	e2 e0       	ldi	r30, 0x02	; 2
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	ec 0f       	add	r30, r28
    1428:	fd 1f       	adc	r31, r29
    142a:	e1 0f       	add	r30, r17
    142c:	f1 1d       	adc	r31, r1
    142e:	80 81       	ld	r24, Z
    1430:	80 33       	cpi	r24, 0x30	; 48
    1432:	19 f4       	brne	.+6      	; 0x143a <vfprintf+0x20a>
    1434:	11 50       	subi	r17, 0x01	; 1
    1436:	11 11       	cpse	r17, r1
    1438:	f4 cf       	rjmp	.-24     	; 0x1422 <vfprintf+0x1f2>
    143a:	97 fe       	sbrs	r9, 7
    143c:	0e c0       	rjmp	.+28     	; 0x145a <vfprintf+0x22a>
    143e:	44 24       	eor	r4, r4
    1440:	43 94       	inc	r4
    1442:	41 0e       	add	r4, r17
    1444:	81 2f       	mov	r24, r17
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	c8 16       	cp	r12, r24
    144a:	d9 06       	cpc	r13, r25
    144c:	2c f4       	brge	.+10     	; 0x1458 <vfprintf+0x228>
    144e:	1c 19       	sub	r17, r12
    1450:	04 c0       	rjmp	.+8      	; 0x145a <vfprintf+0x22a>
    1452:	44 24       	eor	r4, r4
    1454:	43 94       	inc	r4
    1456:	01 c0       	rjmp	.+2      	; 0x145a <vfprintf+0x22a>
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	97 fe       	sbrs	r9, 7
    145c:	06 c0       	rjmp	.+12     	; 0x146a <vfprintf+0x23a>
    145e:	1c 14       	cp	r1, r12
    1460:	1d 04       	cpc	r1, r13
    1462:	34 f4       	brge	.+12     	; 0x1470 <vfprintf+0x240>
    1464:	c6 01       	movw	r24, r12
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <vfprintf+0x244>
    146a:	85 e0       	ldi	r24, 0x05	; 5
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <vfprintf+0x244>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	01 11       	cpse	r16, r1
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	11 23       	and	r17, r17
    147a:	31 f0       	breq	.+12     	; 0x1488 <vfprintf+0x258>
    147c:	21 2f       	mov	r18, r17
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	2f 5f       	subi	r18, 0xFF	; 255
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	82 0f       	add	r24, r18
    1486:	93 1f       	adc	r25, r19
    1488:	25 2d       	mov	r18, r5
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	82 17       	cp	r24, r18
    148e:	93 07       	cpc	r25, r19
    1490:	14 f4       	brge	.+4      	; 0x1496 <vfprintf+0x266>
    1492:	58 1a       	sub	r5, r24
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <vfprintf+0x268>
    1496:	51 2c       	mov	r5, r1
    1498:	89 2d       	mov	r24, r9
    149a:	89 70       	andi	r24, 0x09	; 9
    149c:	49 f4       	brne	.+18     	; 0x14b0 <vfprintf+0x280>
    149e:	55 20       	and	r5, r5
    14a0:	39 f0       	breq	.+14     	; 0x14b0 <vfprintf+0x280>
    14a2:	b7 01       	movw	r22, r14
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    14ac:	5a 94       	dec	r5
    14ae:	f7 cf       	rjmp	.-18     	; 0x149e <vfprintf+0x26e>
    14b0:	00 23       	and	r16, r16
    14b2:	29 f0       	breq	.+10     	; 0x14be <vfprintf+0x28e>
    14b4:	b7 01       	movw	r22, r14
    14b6:	80 2f       	mov	r24, r16
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    14be:	93 fc       	sbrc	r9, 3
    14c0:	09 c0       	rjmp	.+18     	; 0x14d4 <vfprintf+0x2a4>
    14c2:	55 20       	and	r5, r5
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <vfprintf+0x2a4>
    14c6:	b7 01       	movw	r22, r14
    14c8:	80 e3       	ldi	r24, 0x30	; 48
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    14d0:	5a 94       	dec	r5
    14d2:	f7 cf       	rjmp	.-18     	; 0x14c2 <vfprintf+0x292>
    14d4:	97 fe       	sbrs	r9, 7
    14d6:	4c c0       	rjmp	.+152    	; 0x1570 <vfprintf+0x340>
    14d8:	46 01       	movw	r8, r12
    14da:	d7 fe       	sbrs	r13, 7
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <vfprintf+0x2b2>
    14de:	81 2c       	mov	r8, r1
    14e0:	91 2c       	mov	r9, r1
    14e2:	c6 01       	movw	r24, r12
    14e4:	88 19       	sub	r24, r8
    14e6:	99 09       	sbc	r25, r9
    14e8:	f3 01       	movw	r30, r6
    14ea:	e8 0f       	add	r30, r24
    14ec:	f9 1f       	adc	r31, r25
    14ee:	fe 87       	std	Y+14, r31	; 0x0e
    14f0:	ed 87       	std	Y+13, r30	; 0x0d
    14f2:	96 01       	movw	r18, r12
    14f4:	24 19       	sub	r18, r4
    14f6:	31 09       	sbc	r19, r1
    14f8:	38 8b       	std	Y+16, r19	; 0x10
    14fa:	2f 87       	std	Y+15, r18	; 0x0f
    14fc:	01 2f       	mov	r16, r17
    14fe:	10 e0       	ldi	r17, 0x00	; 0
    1500:	11 95       	neg	r17
    1502:	01 95       	neg	r16
    1504:	11 09       	sbc	r17, r1
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	83 16       	cp	r8, r19
    150a:	93 06       	cpc	r9, r19
    150c:	29 f4       	brne	.+10     	; 0x1518 <vfprintf+0x2e8>
    150e:	b7 01       	movw	r22, r14
    1510:	8e e2       	ldi	r24, 0x2E	; 46
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1518:	c8 14       	cp	r12, r8
    151a:	d9 04       	cpc	r13, r9
    151c:	4c f0       	brlt	.+18     	; 0x1530 <vfprintf+0x300>
    151e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1520:	98 89       	ldd	r25, Y+16	; 0x10
    1522:	88 15       	cp	r24, r8
    1524:	99 05       	cpc	r25, r9
    1526:	24 f4       	brge	.+8      	; 0x1530 <vfprintf+0x300>
    1528:	ed 85       	ldd	r30, Y+13	; 0x0d
    152a:	fe 85       	ldd	r31, Y+14	; 0x0e
    152c:	81 81       	ldd	r24, Z+1	; 0x01
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <vfprintf+0x302>
    1530:	80 e3       	ldi	r24, 0x30	; 48
    1532:	f1 e0       	ldi	r31, 0x01	; 1
    1534:	8f 1a       	sub	r8, r31
    1536:	91 08       	sbc	r9, r1
    1538:	2d 85       	ldd	r18, Y+13	; 0x0d
    153a:	3e 85       	ldd	r19, Y+14	; 0x0e
    153c:	2f 5f       	subi	r18, 0xFF	; 255
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	3e 87       	std	Y+14, r19	; 0x0e
    1542:	2d 87       	std	Y+13, r18	; 0x0d
    1544:	80 16       	cp	r8, r16
    1546:	91 06       	cpc	r9, r17
    1548:	2c f0       	brlt	.+10     	; 0x1554 <vfprintf+0x324>
    154a:	b7 01       	movw	r22, r14
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1552:	d9 cf       	rjmp	.-78     	; 0x1506 <vfprintf+0x2d6>
    1554:	c8 14       	cp	r12, r8
    1556:	d9 04       	cpc	r13, r9
    1558:	41 f4       	brne	.+16     	; 0x156a <vfprintf+0x33a>
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	96 33       	cpi	r25, 0x36	; 54
    155e:	20 f4       	brcc	.+8      	; 0x1568 <vfprintf+0x338>
    1560:	95 33       	cpi	r25, 0x35	; 53
    1562:	19 f4       	brne	.+6      	; 0x156a <vfprintf+0x33a>
    1564:	3c 85       	ldd	r19, Y+12	; 0x0c
    1566:	34 ff       	sbrs	r19, 4
    1568:	81 e3       	ldi	r24, 0x31	; 49
    156a:	b7 01       	movw	r22, r14
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	4e c0       	rjmp	.+156    	; 0x160c <vfprintf+0x3dc>
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	81 33       	cpi	r24, 0x31	; 49
    1574:	19 f0       	breq	.+6      	; 0x157c <vfprintf+0x34c>
    1576:	9c 85       	ldd	r25, Y+12	; 0x0c
    1578:	9f 7e       	andi	r25, 0xEF	; 239
    157a:	9c 87       	std	Y+12, r25	; 0x0c
    157c:	b7 01       	movw	r22, r14
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1584:	11 11       	cpse	r17, r1
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <vfprintf+0x362>
    1588:	94 fc       	sbrc	r9, 4
    158a:	18 c0       	rjmp	.+48     	; 0x15bc <vfprintf+0x38c>
    158c:	85 e6       	ldi	r24, 0x65	; 101
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	17 c0       	rjmp	.+46     	; 0x15c0 <vfprintf+0x390>
    1592:	b7 01       	movw	r22, r14
    1594:	8e e2       	ldi	r24, 0x2E	; 46
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    159c:	1e 5f       	subi	r17, 0xFE	; 254
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	01 e0       	ldi	r16, 0x01	; 1
    15a2:	08 0f       	add	r16, r24
    15a4:	f3 01       	movw	r30, r6
    15a6:	e8 0f       	add	r30, r24
    15a8:	f1 1d       	adc	r31, r1
    15aa:	80 81       	ld	r24, Z
    15ac:	b7 01       	movw	r22, r14
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    15b4:	80 2f       	mov	r24, r16
    15b6:	01 13       	cpse	r16, r17
    15b8:	f3 cf       	rjmp	.-26     	; 0x15a0 <vfprintf+0x370>
    15ba:	e6 cf       	rjmp	.-52     	; 0x1588 <vfprintf+0x358>
    15bc:	85 e4       	ldi	r24, 0x45	; 69
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	b7 01       	movw	r22, r14
    15c2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    15c6:	d7 fc       	sbrc	r13, 7
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <vfprintf+0x3a6>
    15ca:	c1 14       	cp	r12, r1
    15cc:	d1 04       	cpc	r13, r1
    15ce:	41 f4       	brne	.+16     	; 0x15e0 <vfprintf+0x3b0>
    15d0:	ec 85       	ldd	r30, Y+12	; 0x0c
    15d2:	e4 ff       	sbrs	r30, 4
    15d4:	05 c0       	rjmp	.+10     	; 0x15e0 <vfprintf+0x3b0>
    15d6:	d1 94       	neg	r13
    15d8:	c1 94       	neg	r12
    15da:	d1 08       	sbc	r13, r1
    15dc:	8d e2       	ldi	r24, 0x2D	; 45
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <vfprintf+0x3b2>
    15e0:	8b e2       	ldi	r24, 0x2B	; 43
    15e2:	b7 01       	movw	r22, r14
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	2a e0       	ldi	r18, 0x0A	; 10
    15ee:	c2 16       	cp	r12, r18
    15f0:	d1 04       	cpc	r13, r1
    15f2:	2c f0       	brlt	.+10     	; 0x15fe <vfprintf+0x3ce>
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	fa e0       	ldi	r31, 0x0A	; 10
    15f8:	cf 1a       	sub	r12, r31
    15fa:	d1 08       	sbc	r13, r1
    15fc:	f7 cf       	rjmp	.-18     	; 0x15ec <vfprintf+0x3bc>
    15fe:	b7 01       	movw	r22, r14
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1606:	b7 01       	movw	r22, r14
    1608:	c6 01       	movw	r24, r12
    160a:	c0 96       	adiw	r24, 0x30	; 48
    160c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1610:	54 c1       	rjmp	.+680    	; 0x18ba <vfprintf+0x68a>
    1612:	83 36       	cpi	r24, 0x63	; 99
    1614:	31 f0       	breq	.+12     	; 0x1622 <vfprintf+0x3f2>
    1616:	83 37       	cpi	r24, 0x73	; 115
    1618:	79 f0       	breq	.+30     	; 0x1638 <vfprintf+0x408>
    161a:	83 35       	cpi	r24, 0x53	; 83
    161c:	09 f0       	breq	.+2      	; 0x1620 <vfprintf+0x3f0>
    161e:	56 c0       	rjmp	.+172    	; 0x16cc <vfprintf+0x49c>
    1620:	20 c0       	rjmp	.+64     	; 0x1662 <vfprintf+0x432>
    1622:	56 01       	movw	r10, r12
    1624:	32 e0       	ldi	r19, 0x02	; 2
    1626:	a3 0e       	add	r10, r19
    1628:	b1 1c       	adc	r11, r1
    162a:	f6 01       	movw	r30, r12
    162c:	80 81       	ld	r24, Z
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	01 e0       	ldi	r16, 0x01	; 1
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	63 01       	movw	r12, r6
    1636:	12 c0       	rjmp	.+36     	; 0x165c <vfprintf+0x42c>
    1638:	56 01       	movw	r10, r12
    163a:	f2 e0       	ldi	r31, 0x02	; 2
    163c:	af 0e       	add	r10, r31
    163e:	b1 1c       	adc	r11, r1
    1640:	f6 01       	movw	r30, r12
    1642:	c0 80       	ld	r12, Z
    1644:	d1 80       	ldd	r13, Z+1	; 0x01
    1646:	96 fe       	sbrs	r9, 6
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <vfprintf+0x420>
    164a:	61 2f       	mov	r22, r17
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <vfprintf+0x424>
    1650:	6f ef       	ldi	r22, 0xFF	; 255
    1652:	7f ef       	ldi	r23, 0xFF	; 255
    1654:	c6 01       	movw	r24, r12
    1656:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <strnlen>
    165a:	8c 01       	movw	r16, r24
    165c:	f9 2d       	mov	r31, r9
    165e:	ff 77       	andi	r31, 0x7F	; 127
    1660:	14 c0       	rjmp	.+40     	; 0x168a <vfprintf+0x45a>
    1662:	56 01       	movw	r10, r12
    1664:	22 e0       	ldi	r18, 0x02	; 2
    1666:	a2 0e       	add	r10, r18
    1668:	b1 1c       	adc	r11, r1
    166a:	f6 01       	movw	r30, r12
    166c:	c0 80       	ld	r12, Z
    166e:	d1 80       	ldd	r13, Z+1	; 0x01
    1670:	96 fe       	sbrs	r9, 6
    1672:	03 c0       	rjmp	.+6      	; 0x167a <vfprintf+0x44a>
    1674:	61 2f       	mov	r22, r17
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0x44e>
    167a:	6f ef       	ldi	r22, 0xFF	; 255
    167c:	7f ef       	ldi	r23, 0xFF	; 255
    167e:	c6 01       	movw	r24, r12
    1680:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <strnlen_P>
    1684:	8c 01       	movw	r16, r24
    1686:	f9 2d       	mov	r31, r9
    1688:	f0 68       	ori	r31, 0x80	; 128
    168a:	9f 2e       	mov	r9, r31
    168c:	f3 fd       	sbrc	r31, 3
    168e:	1a c0       	rjmp	.+52     	; 0x16c4 <vfprintf+0x494>
    1690:	85 2d       	mov	r24, r5
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	08 17       	cp	r16, r24
    1696:	19 07       	cpc	r17, r25
    1698:	a8 f4       	brcc	.+42     	; 0x16c4 <vfprintf+0x494>
    169a:	b7 01       	movw	r22, r14
    169c:	80 e2       	ldi	r24, 0x20	; 32
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    16a4:	5a 94       	dec	r5
    16a6:	f4 cf       	rjmp	.-24     	; 0x1690 <vfprintf+0x460>
    16a8:	f6 01       	movw	r30, r12
    16aa:	97 fc       	sbrc	r9, 7
    16ac:	85 91       	lpm	r24, Z+
    16ae:	97 fe       	sbrs	r9, 7
    16b0:	81 91       	ld	r24, Z+
    16b2:	6f 01       	movw	r12, r30
    16b4:	b7 01       	movw	r22, r14
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    16bc:	51 10       	cpse	r5, r1
    16be:	5a 94       	dec	r5
    16c0:	01 50       	subi	r16, 0x01	; 1
    16c2:	11 09       	sbc	r17, r1
    16c4:	01 15       	cp	r16, r1
    16c6:	11 05       	cpc	r17, r1
    16c8:	79 f7       	brne	.-34     	; 0x16a8 <vfprintf+0x478>
    16ca:	f7 c0       	rjmp	.+494    	; 0x18ba <vfprintf+0x68a>
    16cc:	84 36       	cpi	r24, 0x64	; 100
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <vfprintf+0x4a4>
    16d0:	89 36       	cpi	r24, 0x69	; 105
    16d2:	61 f5       	brne	.+88     	; 0x172c <vfprintf+0x4fc>
    16d4:	56 01       	movw	r10, r12
    16d6:	97 fe       	sbrs	r9, 7
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <vfprintf+0x4bc>
    16da:	24 e0       	ldi	r18, 0x04	; 4
    16dc:	a2 0e       	add	r10, r18
    16de:	b1 1c       	adc	r11, r1
    16e0:	f6 01       	movw	r30, r12
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	0a c0       	rjmp	.+20     	; 0x1700 <vfprintf+0x4d0>
    16ec:	f2 e0       	ldi	r31, 0x02	; 2
    16ee:	af 0e       	add	r10, r31
    16f0:	b1 1c       	adc	r11, r1
    16f2:	f6 01       	movw	r30, r12
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	07 2e       	mov	r0, r23
    16fa:	00 0c       	add	r0, r0
    16fc:	88 0b       	sbc	r24, r24
    16fe:	99 0b       	sbc	r25, r25
    1700:	f9 2d       	mov	r31, r9
    1702:	ff 76       	andi	r31, 0x6F	; 111
    1704:	9f 2e       	mov	r9, r31
    1706:	97 ff       	sbrs	r25, 7
    1708:	09 c0       	rjmp	.+18     	; 0x171c <vfprintf+0x4ec>
    170a:	90 95       	com	r25
    170c:	80 95       	com	r24
    170e:	70 95       	com	r23
    1710:	61 95       	neg	r22
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	8f 4f       	sbci	r24, 0xFF	; 255
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	f0 68       	ori	r31, 0x80	; 128
    171a:	9f 2e       	mov	r9, r31
    171c:	2a e0       	ldi	r18, 0x0A	; 10
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	a3 01       	movw	r20, r6
    1722:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__ultoa_invert>
    1726:	c8 2e       	mov	r12, r24
    1728:	c6 18       	sub	r12, r6
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <vfprintf+0x57a>
    172c:	09 2d       	mov	r16, r9
    172e:	85 37       	cpi	r24, 0x75	; 117
    1730:	21 f4       	brne	.+8      	; 0x173a <vfprintf+0x50a>
    1732:	0f 7e       	andi	r16, 0xEF	; 239
    1734:	2a e0       	ldi	r18, 0x0A	; 10
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	1d c0       	rjmp	.+58     	; 0x1774 <vfprintf+0x544>
    173a:	09 7f       	andi	r16, 0xF9	; 249
    173c:	8f 36       	cpi	r24, 0x6F	; 111
    173e:	91 f0       	breq	.+36     	; 0x1764 <vfprintf+0x534>
    1740:	18 f4       	brcc	.+6      	; 0x1748 <vfprintf+0x518>
    1742:	88 35       	cpi	r24, 0x58	; 88
    1744:	59 f0       	breq	.+22     	; 0x175c <vfprintf+0x52c>
    1746:	c3 c0       	rjmp	.+390    	; 0x18ce <vfprintf+0x69e>
    1748:	80 37       	cpi	r24, 0x70	; 112
    174a:	19 f0       	breq	.+6      	; 0x1752 <vfprintf+0x522>
    174c:	88 37       	cpi	r24, 0x78	; 120
    174e:	11 f0       	breq	.+4      	; 0x1754 <vfprintf+0x524>
    1750:	be c0       	rjmp	.+380    	; 0x18ce <vfprintf+0x69e>
    1752:	00 61       	ori	r16, 0x10	; 16
    1754:	04 ff       	sbrs	r16, 4
    1756:	09 c0       	rjmp	.+18     	; 0x176a <vfprintf+0x53a>
    1758:	04 60       	ori	r16, 0x04	; 4
    175a:	07 c0       	rjmp	.+14     	; 0x176a <vfprintf+0x53a>
    175c:	94 fe       	sbrs	r9, 4
    175e:	08 c0       	rjmp	.+16     	; 0x1770 <vfprintf+0x540>
    1760:	06 60       	ori	r16, 0x06	; 6
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <vfprintf+0x540>
    1764:	28 e0       	ldi	r18, 0x08	; 8
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <vfprintf+0x544>
    176a:	20 e1       	ldi	r18, 0x10	; 16
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x544>
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	32 e0       	ldi	r19, 0x02	; 2
    1774:	56 01       	movw	r10, r12
    1776:	07 ff       	sbrs	r16, 7
    1778:	09 c0       	rjmp	.+18     	; 0x178c <vfprintf+0x55c>
    177a:	84 e0       	ldi	r24, 0x04	; 4
    177c:	a8 0e       	add	r10, r24
    177e:	b1 1c       	adc	r11, r1
    1780:	f6 01       	movw	r30, r12
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	08 c0       	rjmp	.+16     	; 0x179c <vfprintf+0x56c>
    178c:	f2 e0       	ldi	r31, 0x02	; 2
    178e:	af 0e       	add	r10, r31
    1790:	b1 1c       	adc	r11, r1
    1792:	f6 01       	movw	r30, r12
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a3 01       	movw	r20, r6
    179e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__ultoa_invert>
    17a2:	c8 2e       	mov	r12, r24
    17a4:	c6 18       	sub	r12, r6
    17a6:	0f 77       	andi	r16, 0x7F	; 127
    17a8:	90 2e       	mov	r9, r16
    17aa:	96 fe       	sbrs	r9, 6
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <vfprintf+0x594>
    17ae:	09 2d       	mov	r16, r9
    17b0:	0e 7f       	andi	r16, 0xFE	; 254
    17b2:	c1 16       	cp	r12, r17
    17b4:	50 f4       	brcc	.+20     	; 0x17ca <vfprintf+0x59a>
    17b6:	94 fe       	sbrs	r9, 4
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <vfprintf+0x59e>
    17ba:	92 fc       	sbrc	r9, 2
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <vfprintf+0x59e>
    17be:	09 2d       	mov	r16, r9
    17c0:	0e 7e       	andi	r16, 0xEE	; 238
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <vfprintf+0x59e>
    17c4:	dc 2c       	mov	r13, r12
    17c6:	09 2d       	mov	r16, r9
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <vfprintf+0x5a0>
    17ca:	dc 2c       	mov	r13, r12
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x5a0>
    17ce:	d1 2e       	mov	r13, r17
    17d0:	04 ff       	sbrs	r16, 4
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <vfprintf+0x5be>
    17d4:	fe 01       	movw	r30, r28
    17d6:	ec 0d       	add	r30, r12
    17d8:	f1 1d       	adc	r31, r1
    17da:	80 81       	ld	r24, Z
    17dc:	80 33       	cpi	r24, 0x30	; 48
    17de:	11 f4       	brne	.+4      	; 0x17e4 <vfprintf+0x5b4>
    17e0:	09 7e       	andi	r16, 0xE9	; 233
    17e2:	09 c0       	rjmp	.+18     	; 0x17f6 <vfprintf+0x5c6>
    17e4:	02 ff       	sbrs	r16, 2
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x5c4>
    17e8:	d3 94       	inc	r13
    17ea:	d3 94       	inc	r13
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <vfprintf+0x5c6>
    17ee:	80 2f       	mov	r24, r16
    17f0:	86 78       	andi	r24, 0x86	; 134
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <vfprintf+0x5c6>
    17f4:	d3 94       	inc	r13
    17f6:	03 fd       	sbrc	r16, 3
    17f8:	11 c0       	rjmp	.+34     	; 0x181c <vfprintf+0x5ec>
    17fa:	00 ff       	sbrs	r16, 0
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <vfprintf+0x5da>
    17fe:	1c 2d       	mov	r17, r12
    1800:	d5 14       	cp	r13, r5
    1802:	80 f4       	brcc	.+32     	; 0x1824 <vfprintf+0x5f4>
    1804:	15 0d       	add	r17, r5
    1806:	1d 19       	sub	r17, r13
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <vfprintf+0x5f4>
    180a:	d5 14       	cp	r13, r5
    180c:	58 f4       	brcc	.+22     	; 0x1824 <vfprintf+0x5f4>
    180e:	b7 01       	movw	r22, r14
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1818:	d3 94       	inc	r13
    181a:	f7 cf       	rjmp	.-18     	; 0x180a <vfprintf+0x5da>
    181c:	d5 14       	cp	r13, r5
    181e:	10 f4       	brcc	.+4      	; 0x1824 <vfprintf+0x5f4>
    1820:	5d 18       	sub	r5, r13
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <vfprintf+0x5f6>
    1824:	51 2c       	mov	r5, r1
    1826:	04 ff       	sbrs	r16, 4
    1828:	10 c0       	rjmp	.+32     	; 0x184a <vfprintf+0x61a>
    182a:	b7 01       	movw	r22, r14
    182c:	80 e3       	ldi	r24, 0x30	; 48
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1834:	02 ff       	sbrs	r16, 2
    1836:	17 c0       	rjmp	.+46     	; 0x1866 <vfprintf+0x636>
    1838:	01 fd       	sbrc	r16, 1
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <vfprintf+0x612>
    183c:	88 e7       	ldi	r24, 0x78	; 120
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x616>
    1842:	88 e5       	ldi	r24, 0x58	; 88
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	b7 01       	movw	r22, r14
    1848:	0c c0       	rjmp	.+24     	; 0x1862 <vfprintf+0x632>
    184a:	80 2f       	mov	r24, r16
    184c:	86 78       	andi	r24, 0x86	; 134
    184e:	59 f0       	breq	.+22     	; 0x1866 <vfprintf+0x636>
    1850:	01 ff       	sbrs	r16, 1
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <vfprintf+0x628>
    1854:	8b e2       	ldi	r24, 0x2B	; 43
    1856:	01 c0       	rjmp	.+2      	; 0x185a <vfprintf+0x62a>
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	07 fd       	sbrc	r16, 7
    185c:	8d e2       	ldi	r24, 0x2D	; 45
    185e:	b7 01       	movw	r22, r14
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1866:	c1 16       	cp	r12, r17
    1868:	38 f4       	brcc	.+14     	; 0x1878 <vfprintf+0x648>
    186a:	b7 01       	movw	r22, r14
    186c:	80 e3       	ldi	r24, 0x30	; 48
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    1874:	11 50       	subi	r17, 0x01	; 1
    1876:	f7 cf       	rjmp	.-18     	; 0x1866 <vfprintf+0x636>
    1878:	ca 94       	dec	r12
    187a:	f3 01       	movw	r30, r6
    187c:	ec 0d       	add	r30, r12
    187e:	f1 1d       	adc	r31, r1
    1880:	80 81       	ld	r24, Z
    1882:	b7 01       	movw	r22, r14
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    188a:	c1 10       	cpse	r12, r1
    188c:	f5 cf       	rjmp	.-22     	; 0x1878 <vfprintf+0x648>
    188e:	15 c0       	rjmp	.+42     	; 0x18ba <vfprintf+0x68a>
    1890:	f4 e0       	ldi	r31, 0x04	; 4
    1892:	f5 15       	cp	r31, r5
    1894:	60 f5       	brcc	.+88     	; 0x18ee <vfprintf+0x6be>
    1896:	84 e0       	ldi	r24, 0x04	; 4
    1898:	58 1a       	sub	r5, r24
    189a:	93 fe       	sbrs	r9, 3
    189c:	1f c0       	rjmp	.+62     	; 0x18dc <vfprintf+0x6ac>
    189e:	01 11       	cpse	r16, r1
    18a0:	27 c0       	rjmp	.+78     	; 0x18f0 <vfprintf+0x6c0>
    18a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a4:	23 ff       	sbrs	r18, 3
    18a6:	2a c0       	rjmp	.+84     	; 0x18fc <vfprintf+0x6cc>
    18a8:	04 e5       	ldi	r16, 0x54	; 84
    18aa:	10 e0       	ldi	r17, 0x00	; 0
    18ac:	39 2d       	mov	r19, r9
    18ae:	30 71       	andi	r19, 0x10	; 16
    18b0:	93 2e       	mov	r9, r19
    18b2:	f8 01       	movw	r30, r16
    18b4:	84 91       	lpm	r24, Z
    18b6:	81 11       	cpse	r24, r1
    18b8:	24 c0       	rjmp	.+72     	; 0x1902 <vfprintf+0x6d2>
    18ba:	55 20       	and	r5, r5
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <vfprintf+0x690>
    18be:	e4 cc       	rjmp	.-1592   	; 0x1288 <vfprintf+0x58>
    18c0:	b7 01       	movw	r22, r14
    18c2:	80 e2       	ldi	r24, 0x20	; 32
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    18ca:	5a 94       	dec	r5
    18cc:	f6 cf       	rjmp	.-20     	; 0x18ba <vfprintf+0x68a>
    18ce:	f7 01       	movw	r30, r14
    18d0:	86 81       	ldd	r24, Z+6	; 0x06
    18d2:	97 81       	ldd	r25, Z+7	; 0x07
    18d4:	26 c0       	rjmp	.+76     	; 0x1922 <vfprintf+0x6f2>
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	23 c0       	rjmp	.+70     	; 0x1922 <vfprintf+0x6f2>
    18dc:	b7 01       	movw	r22, r14
    18de:	80 e2       	ldi	r24, 0x20	; 32
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    18e6:	5a 94       	dec	r5
    18e8:	51 10       	cpse	r5, r1
    18ea:	f8 cf       	rjmp	.-16     	; 0x18dc <vfprintf+0x6ac>
    18ec:	d8 cf       	rjmp	.-80     	; 0x189e <vfprintf+0x66e>
    18ee:	51 2c       	mov	r5, r1
    18f0:	b7 01       	movw	r22, r14
    18f2:	80 2f       	mov	r24, r16
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    18fa:	d3 cf       	rjmp	.-90     	; 0x18a2 <vfprintf+0x672>
    18fc:	08 e5       	ldi	r16, 0x58	; 88
    18fe:	10 e0       	ldi	r17, 0x00	; 0
    1900:	d5 cf       	rjmp	.-86     	; 0x18ac <vfprintf+0x67c>
    1902:	91 10       	cpse	r9, r1
    1904:	80 52       	subi	r24, 0x20	; 32
    1906:	b7 01       	movw	r22, r14
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <fputc>
    190e:	0f 5f       	subi	r16, 0xFF	; 255
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	cf cf       	rjmp	.-98     	; 0x18b2 <vfprintf+0x682>
    1914:	23 e0       	ldi	r18, 0x03	; 3
    1916:	25 15       	cp	r18, r5
    1918:	10 f4       	brcc	.+4      	; 0x191e <vfprintf+0x6ee>
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	bd cf       	rjmp	.-134    	; 0x1898 <vfprintf+0x668>
    191e:	51 2c       	mov	r5, r1
    1920:	c0 cf       	rjmp	.-128    	; 0x18a2 <vfprintf+0x672>
    1922:	60 96       	adiw	r28, 0x10	; 16
    1924:	e2 e1       	ldi	r30, 0x12	; 18
    1926:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__epilogue_restores__>

0000192a <__prologue_saves__>:
    192a:	2f 92       	push	r2
    192c:	3f 92       	push	r3
    192e:	4f 92       	push	r4
    1930:	5f 92       	push	r5
    1932:	6f 92       	push	r6
    1934:	7f 92       	push	r7
    1936:	8f 92       	push	r8
    1938:	9f 92       	push	r9
    193a:	af 92       	push	r10
    193c:	bf 92       	push	r11
    193e:	cf 92       	push	r12
    1940:	df 92       	push	r13
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	ca 1b       	sub	r28, r26
    1954:	db 0b       	sbc	r29, r27
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	09 94       	ijmp

00001962 <__epilogue_restores__>:
    1962:	2a 88       	ldd	r2, Y+18	; 0x12
    1964:	39 88       	ldd	r3, Y+17	; 0x11
    1966:	48 88       	ldd	r4, Y+16	; 0x10
    1968:	5f 84       	ldd	r5, Y+15	; 0x0f
    196a:	6e 84       	ldd	r6, Y+14	; 0x0e
    196c:	7d 84       	ldd	r7, Y+13	; 0x0d
    196e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1970:	9b 84       	ldd	r9, Y+11	; 0x0b
    1972:	aa 84       	ldd	r10, Y+10	; 0x0a
    1974:	b9 84       	ldd	r11, Y+9	; 0x09
    1976:	c8 84       	ldd	r12, Y+8	; 0x08
    1978:	df 80       	ldd	r13, Y+7	; 0x07
    197a:	ee 80       	ldd	r14, Y+6	; 0x06
    197c:	fd 80       	ldd	r15, Y+5	; 0x05
    197e:	0c 81       	ldd	r16, Y+4	; 0x04
    1980:	1b 81       	ldd	r17, Y+3	; 0x03
    1982:	aa 81       	ldd	r26, Y+2	; 0x02
    1984:	b9 81       	ldd	r27, Y+1	; 0x01
    1986:	ce 0f       	add	r28, r30
    1988:	d1 1d       	adc	r29, r1
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	ed 01       	movw	r28, r26
    1996:	08 95       	ret

00001998 <__ftoa_engine>:
    1998:	28 30       	cpi	r18, 0x08	; 8
    199a:	08 f0       	brcs	.+2      	; 0x199e <__ftoa_engine+0x6>
    199c:	27 e0       	ldi	r18, 0x07	; 7
    199e:	33 27       	eor	r19, r19
    19a0:	da 01       	movw	r26, r20
    19a2:	99 0f       	add	r25, r25
    19a4:	31 1d       	adc	r19, r1
    19a6:	87 fd       	sbrc	r24, 7
    19a8:	91 60       	ori	r25, 0x01	; 1
    19aa:	00 96       	adiw	r24, 0x00	; 0
    19ac:	61 05       	cpc	r22, r1
    19ae:	71 05       	cpc	r23, r1
    19b0:	39 f4       	brne	.+14     	; 0x19c0 <__ftoa_engine+0x28>
    19b2:	32 60       	ori	r19, 0x02	; 2
    19b4:	2e 5f       	subi	r18, 0xFE	; 254
    19b6:	3d 93       	st	X+, r19
    19b8:	30 e3       	ldi	r19, 0x30	; 48
    19ba:	2a 95       	dec	r18
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <__ftoa_engine+0x1e>
    19be:	08 95       	ret
    19c0:	9f 3f       	cpi	r25, 0xFF	; 255
    19c2:	30 f0       	brcs	.+12     	; 0x19d0 <__ftoa_engine+0x38>
    19c4:	80 38       	cpi	r24, 0x80	; 128
    19c6:	71 05       	cpc	r23, r1
    19c8:	61 05       	cpc	r22, r1
    19ca:	09 f0       	breq	.+2      	; 0x19ce <__ftoa_engine+0x36>
    19cc:	3c 5f       	subi	r19, 0xFC	; 252
    19ce:	3c 5f       	subi	r19, 0xFC	; 252
    19d0:	3d 93       	st	X+, r19
    19d2:	91 30       	cpi	r25, 0x01	; 1
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <__ftoa_engine+0x40>
    19d6:	80 68       	ori	r24, 0x80	; 128
    19d8:	91 1d       	adc	r25, r1
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	1f 93       	push	r17
    19e0:	0f 93       	push	r16
    19e2:	ff 92       	push	r15
    19e4:	ef 92       	push	r14
    19e6:	19 2f       	mov	r17, r25
    19e8:	98 7f       	andi	r25, 0xF8	; 248
    19ea:	96 95       	lsr	r25
    19ec:	e9 2f       	mov	r30, r25
    19ee:	96 95       	lsr	r25
    19f0:	96 95       	lsr	r25
    19f2:	e9 0f       	add	r30, r25
    19f4:	ff 27       	eor	r31, r31
    19f6:	ea 54       	subi	r30, 0x4A	; 74
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	99 27       	eor	r25, r25
    19fc:	33 27       	eor	r19, r19
    19fe:	ee 24       	eor	r14, r14
    1a00:	ff 24       	eor	r15, r15
    1a02:	a7 01       	movw	r20, r14
    1a04:	e7 01       	movw	r28, r14
    1a06:	05 90       	lpm	r0, Z+
    1a08:	08 94       	sec
    1a0a:	07 94       	ror	r0
    1a0c:	28 f4       	brcc	.+10     	; 0x1a18 <__ftoa_engine+0x80>
    1a0e:	36 0f       	add	r19, r22
    1a10:	e7 1e       	adc	r14, r23
    1a12:	f8 1e       	adc	r15, r24
    1a14:	49 1f       	adc	r20, r25
    1a16:	51 1d       	adc	r21, r1
    1a18:	66 0f       	add	r22, r22
    1a1a:	77 1f       	adc	r23, r23
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	06 94       	lsr	r0
    1a22:	a1 f7       	brne	.-24     	; 0x1a0c <__ftoa_engine+0x74>
    1a24:	05 90       	lpm	r0, Z+
    1a26:	07 94       	ror	r0
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__ftoa_engine+0x9c>
    1a2a:	e7 0e       	add	r14, r23
    1a2c:	f8 1e       	adc	r15, r24
    1a2e:	49 1f       	adc	r20, r25
    1a30:	56 1f       	adc	r21, r22
    1a32:	c1 1d       	adc	r28, r1
    1a34:	77 0f       	add	r23, r23
    1a36:	88 1f       	adc	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	66 1f       	adc	r22, r22
    1a3c:	06 94       	lsr	r0
    1a3e:	a1 f7       	brne	.-24     	; 0x1a28 <__ftoa_engine+0x90>
    1a40:	05 90       	lpm	r0, Z+
    1a42:	07 94       	ror	r0
    1a44:	28 f4       	brcc	.+10     	; 0x1a50 <__ftoa_engine+0xb8>
    1a46:	f8 0e       	add	r15, r24
    1a48:	49 1f       	adc	r20, r25
    1a4a:	56 1f       	adc	r21, r22
    1a4c:	c7 1f       	adc	r28, r23
    1a4e:	d1 1d       	adc	r29, r1
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	66 1f       	adc	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	06 94       	lsr	r0
    1a5a:	a1 f7       	brne	.-24     	; 0x1a44 <__ftoa_engine+0xac>
    1a5c:	05 90       	lpm	r0, Z+
    1a5e:	07 94       	ror	r0
    1a60:	20 f4       	brcc	.+8      	; 0x1a6a <__ftoa_engine+0xd2>
    1a62:	49 0f       	add	r20, r25
    1a64:	56 1f       	adc	r21, r22
    1a66:	c7 1f       	adc	r28, r23
    1a68:	d8 1f       	adc	r29, r24
    1a6a:	99 0f       	add	r25, r25
    1a6c:	66 1f       	adc	r22, r22
    1a6e:	77 1f       	adc	r23, r23
    1a70:	88 1f       	adc	r24, r24
    1a72:	06 94       	lsr	r0
    1a74:	a9 f7       	brne	.-22     	; 0x1a60 <__ftoa_engine+0xc8>
    1a76:	84 91       	lpm	r24, Z
    1a78:	10 95       	com	r17
    1a7a:	17 70       	andi	r17, 0x07	; 7
    1a7c:	41 f0       	breq	.+16     	; 0x1a8e <__ftoa_engine+0xf6>
    1a7e:	d6 95       	lsr	r29
    1a80:	c7 95       	ror	r28
    1a82:	57 95       	ror	r21
    1a84:	47 95       	ror	r20
    1a86:	f7 94       	ror	r15
    1a88:	e7 94       	ror	r14
    1a8a:	1a 95       	dec	r17
    1a8c:	c1 f7       	brne	.-16     	; 0x1a7e <__ftoa_engine+0xe6>
    1a8e:	ec e5       	ldi	r30, 0x5C	; 92
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	68 94       	set
    1a94:	15 90       	lpm	r1, Z+
    1a96:	15 91       	lpm	r17, Z+
    1a98:	35 91       	lpm	r19, Z+
    1a9a:	65 91       	lpm	r22, Z+
    1a9c:	95 91       	lpm	r25, Z+
    1a9e:	05 90       	lpm	r0, Z+
    1aa0:	7f e2       	ldi	r23, 0x2F	; 47
    1aa2:	73 95       	inc	r23
    1aa4:	e1 18       	sub	r14, r1
    1aa6:	f1 0a       	sbc	r15, r17
    1aa8:	43 0b       	sbc	r20, r19
    1aaa:	56 0b       	sbc	r21, r22
    1aac:	c9 0b       	sbc	r28, r25
    1aae:	d0 09       	sbc	r29, r0
    1ab0:	c0 f7       	brcc	.-16     	; 0x1aa2 <__ftoa_engine+0x10a>
    1ab2:	e1 0c       	add	r14, r1
    1ab4:	f1 1e       	adc	r15, r17
    1ab6:	43 1f       	adc	r20, r19
    1ab8:	56 1f       	adc	r21, r22
    1aba:	c9 1f       	adc	r28, r25
    1abc:	d0 1d       	adc	r29, r0
    1abe:	7e f4       	brtc	.+30     	; 0x1ade <__ftoa_engine+0x146>
    1ac0:	70 33       	cpi	r23, 0x30	; 48
    1ac2:	11 f4       	brne	.+4      	; 0x1ac8 <__ftoa_engine+0x130>
    1ac4:	8a 95       	dec	r24
    1ac6:	e6 cf       	rjmp	.-52     	; 0x1a94 <__ftoa_engine+0xfc>
    1ac8:	e8 94       	clt
    1aca:	01 50       	subi	r16, 0x01	; 1
    1acc:	30 f0       	brcs	.+12     	; 0x1ada <__ftoa_engine+0x142>
    1ace:	08 0f       	add	r16, r24
    1ad0:	0a f4       	brpl	.+2      	; 0x1ad4 <__ftoa_engine+0x13c>
    1ad2:	00 27       	eor	r16, r16
    1ad4:	02 17       	cp	r16, r18
    1ad6:	08 f4       	brcc	.+2      	; 0x1ada <__ftoa_engine+0x142>
    1ad8:	20 2f       	mov	r18, r16
    1ada:	23 95       	inc	r18
    1adc:	02 2f       	mov	r16, r18
    1ade:	7a 33       	cpi	r23, 0x3A	; 58
    1ae0:	28 f0       	brcs	.+10     	; 0x1aec <__ftoa_engine+0x154>
    1ae2:	79 e3       	ldi	r23, 0x39	; 57
    1ae4:	7d 93       	st	X+, r23
    1ae6:	2a 95       	dec	r18
    1ae8:	e9 f7       	brne	.-6      	; 0x1ae4 <__ftoa_engine+0x14c>
    1aea:	10 c0       	rjmp	.+32     	; 0x1b0c <__ftoa_engine+0x174>
    1aec:	7d 93       	st	X+, r23
    1aee:	2a 95       	dec	r18
    1af0:	89 f6       	brne	.-94     	; 0x1a94 <__ftoa_engine+0xfc>
    1af2:	06 94       	lsr	r0
    1af4:	97 95       	ror	r25
    1af6:	67 95       	ror	r22
    1af8:	37 95       	ror	r19
    1afa:	17 95       	ror	r17
    1afc:	17 94       	ror	r1
    1afe:	e1 18       	sub	r14, r1
    1b00:	f1 0a       	sbc	r15, r17
    1b02:	43 0b       	sbc	r20, r19
    1b04:	56 0b       	sbc	r21, r22
    1b06:	c9 0b       	sbc	r28, r25
    1b08:	d0 09       	sbc	r29, r0
    1b0a:	98 f0       	brcs	.+38     	; 0x1b32 <__ftoa_engine+0x19a>
    1b0c:	23 95       	inc	r18
    1b0e:	7e 91       	ld	r23, -X
    1b10:	73 95       	inc	r23
    1b12:	7a 33       	cpi	r23, 0x3A	; 58
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <__ftoa_engine+0x180>
    1b16:	70 e3       	ldi	r23, 0x30	; 48
    1b18:	7c 93       	st	X, r23
    1b1a:	20 13       	cpse	r18, r16
    1b1c:	b8 f7       	brcc	.-18     	; 0x1b0c <__ftoa_engine+0x174>
    1b1e:	7e 91       	ld	r23, -X
    1b20:	70 61       	ori	r23, 0x10	; 16
    1b22:	7d 93       	st	X+, r23
    1b24:	30 f0       	brcs	.+12     	; 0x1b32 <__ftoa_engine+0x19a>
    1b26:	83 95       	inc	r24
    1b28:	71 e3       	ldi	r23, 0x31	; 49
    1b2a:	7d 93       	st	X+, r23
    1b2c:	70 e3       	ldi	r23, 0x30	; 48
    1b2e:	2a 95       	dec	r18
    1b30:	e1 f7       	brne	.-8      	; 0x1b2a <__ftoa_engine+0x192>
    1b32:	11 24       	eor	r1, r1
    1b34:	ef 90       	pop	r14
    1b36:	ff 90       	pop	r15
    1b38:	0f 91       	pop	r16
    1b3a:	1f 91       	pop	r17
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	99 27       	eor	r25, r25
    1b42:	87 fd       	sbrc	r24, 7
    1b44:	90 95       	com	r25
    1b46:	08 95       	ret

00001b48 <strnlen_P>:
    1b48:	fc 01       	movw	r30, r24
    1b4a:	05 90       	lpm	r0, Z+
    1b4c:	61 50       	subi	r22, 0x01	; 1
    1b4e:	70 40       	sbci	r23, 0x00	; 0
    1b50:	01 10       	cpse	r0, r1
    1b52:	d8 f7       	brcc	.-10     	; 0x1b4a <strnlen_P+0x2>
    1b54:	80 95       	com	r24
    1b56:	90 95       	com	r25
    1b58:	8e 0f       	add	r24, r30
    1b5a:	9f 1f       	adc	r25, r31
    1b5c:	08 95       	ret

00001b5e <strnlen>:
    1b5e:	fc 01       	movw	r30, r24
    1b60:	61 50       	subi	r22, 0x01	; 1
    1b62:	70 40       	sbci	r23, 0x00	; 0
    1b64:	01 90       	ld	r0, Z+
    1b66:	01 10       	cpse	r0, r1
    1b68:	d8 f7       	brcc	.-10     	; 0x1b60 <strnlen+0x2>
    1b6a:	80 95       	com	r24
    1b6c:	90 95       	com	r25
    1b6e:	8e 0f       	add	r24, r30
    1b70:	9f 1f       	adc	r25, r31
    1b72:	08 95       	ret

00001b74 <fputc>:
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	fb 01       	movw	r30, r22
    1b7e:	23 81       	ldd	r18, Z+3	; 0x03
    1b80:	21 fd       	sbrc	r18, 1
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <fputc+0x16>
    1b84:	8f ef       	ldi	r24, 0xFF	; 255
    1b86:	9f ef       	ldi	r25, 0xFF	; 255
    1b88:	2c c0       	rjmp	.+88     	; 0x1be2 <fputc+0x6e>
    1b8a:	22 ff       	sbrs	r18, 2
    1b8c:	16 c0       	rjmp	.+44     	; 0x1bba <fputc+0x46>
    1b8e:	46 81       	ldd	r20, Z+6	; 0x06
    1b90:	57 81       	ldd	r21, Z+7	; 0x07
    1b92:	24 81       	ldd	r18, Z+4	; 0x04
    1b94:	35 81       	ldd	r19, Z+5	; 0x05
    1b96:	42 17       	cp	r20, r18
    1b98:	53 07       	cpc	r21, r19
    1b9a:	44 f4       	brge	.+16     	; 0x1bac <fputc+0x38>
    1b9c:	a0 81       	ld	r26, Z
    1b9e:	b1 81       	ldd	r27, Z+1	; 0x01
    1ba0:	9d 01       	movw	r18, r26
    1ba2:	2f 5f       	subi	r18, 0xFF	; 255
    1ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba6:	31 83       	std	Z+1, r19	; 0x01
    1ba8:	20 83       	st	Z, r18
    1baa:	8c 93       	st	X, r24
    1bac:	26 81       	ldd	r18, Z+6	; 0x06
    1bae:	37 81       	ldd	r19, Z+7	; 0x07
    1bb0:	2f 5f       	subi	r18, 0xFF	; 255
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	37 83       	std	Z+7, r19	; 0x07
    1bb6:	26 83       	std	Z+6, r18	; 0x06
    1bb8:	14 c0       	rjmp	.+40     	; 0x1be2 <fputc+0x6e>
    1bba:	8b 01       	movw	r16, r22
    1bbc:	ec 01       	movw	r28, r24
    1bbe:	fb 01       	movw	r30, r22
    1bc0:	00 84       	ldd	r0, Z+8	; 0x08
    1bc2:	f1 85       	ldd	r31, Z+9	; 0x09
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	09 95       	icall
    1bc8:	89 2b       	or	r24, r25
    1bca:	e1 f6       	brne	.-72     	; 0x1b84 <fputc+0x10>
    1bcc:	d8 01       	movw	r26, r16
    1bce:	16 96       	adiw	r26, 0x06	; 6
    1bd0:	8d 91       	ld	r24, X+
    1bd2:	9c 91       	ld	r25, X
    1bd4:	17 97       	sbiw	r26, 0x07	; 7
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	17 96       	adiw	r26, 0x07	; 7
    1bda:	9c 93       	st	X, r25
    1bdc:	8e 93       	st	-X, r24
    1bde:	16 97       	sbiw	r26, 0x06	; 6
    1be0:	ce 01       	movw	r24, r28
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <sprintf>:
    1bec:	ae e0       	ldi	r26, 0x0E	; 14
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	ec ef       	ldi	r30, 0xFC	; 252
    1bf2:	fd e0       	ldi	r31, 0x0D	; 13
    1bf4:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__prologue_saves__+0x1c>
    1bf8:	0d 89       	ldd	r16, Y+21	; 0x15
    1bfa:	1e 89       	ldd	r17, Y+22	; 0x16
    1bfc:	86 e0       	ldi	r24, 0x06	; 6
    1bfe:	8c 83       	std	Y+4, r24	; 0x04
    1c00:	1a 83       	std	Y+2, r17	; 0x02
    1c02:	09 83       	std	Y+1, r16	; 0x01
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	9f e7       	ldi	r25, 0x7F	; 127
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	ae 01       	movw	r20, r28
    1c0e:	47 5e       	subi	r20, 0xE7	; 231
    1c10:	5f 4f       	sbci	r21, 0xFF	; 255
    1c12:	6f 89       	ldd	r22, Y+23	; 0x17
    1c14:	78 8d       	ldd	r23, Y+24	; 0x18
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	0e 94 18 09 	call	0x1230	; 0x1230 <vfprintf>
    1c1e:	ef 81       	ldd	r30, Y+7	; 0x07
    1c20:	f8 85       	ldd	r31, Y+8	; 0x08
    1c22:	e0 0f       	add	r30, r16
    1c24:	f1 1f       	adc	r31, r17
    1c26:	10 82       	st	Z, r1
    1c28:	2e 96       	adiw	r28, 0x0e	; 14
    1c2a:	e4 e0       	ldi	r30, 0x04	; 4
    1c2c:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__epilogue_restores__+0x1c>

00001c30 <__ultoa_invert>:
    1c30:	fa 01       	movw	r30, r20
    1c32:	aa 27       	eor	r26, r26
    1c34:	28 30       	cpi	r18, 0x08	; 8
    1c36:	51 f1       	breq	.+84     	; 0x1c8c <__ultoa_invert+0x5c>
    1c38:	20 31       	cpi	r18, 0x10	; 16
    1c3a:	81 f1       	breq	.+96     	; 0x1c9c <__ultoa_invert+0x6c>
    1c3c:	e8 94       	clt
    1c3e:	6f 93       	push	r22
    1c40:	6e 7f       	andi	r22, 0xFE	; 254
    1c42:	6e 5f       	subi	r22, 0xFE	; 254
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	8f 4f       	sbci	r24, 0xFF	; 255
    1c48:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4a:	af 4f       	sbci	r26, 0xFF	; 255
    1c4c:	b1 e0       	ldi	r27, 0x01	; 1
    1c4e:	3e d0       	rcall	.+124    	; 0x1ccc <__ultoa_invert+0x9c>
    1c50:	b4 e0       	ldi	r27, 0x04	; 4
    1c52:	3c d0       	rcall	.+120    	; 0x1ccc <__ultoa_invert+0x9c>
    1c54:	67 0f       	add	r22, r23
    1c56:	78 1f       	adc	r23, r24
    1c58:	89 1f       	adc	r24, r25
    1c5a:	9a 1f       	adc	r25, r26
    1c5c:	a1 1d       	adc	r26, r1
    1c5e:	68 0f       	add	r22, r24
    1c60:	79 1f       	adc	r23, r25
    1c62:	8a 1f       	adc	r24, r26
    1c64:	91 1d       	adc	r25, r1
    1c66:	a1 1d       	adc	r26, r1
    1c68:	6a 0f       	add	r22, r26
    1c6a:	71 1d       	adc	r23, r1
    1c6c:	81 1d       	adc	r24, r1
    1c6e:	91 1d       	adc	r25, r1
    1c70:	a1 1d       	adc	r26, r1
    1c72:	20 d0       	rcall	.+64     	; 0x1cb4 <__ultoa_invert+0x84>
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <__ultoa_invert+0x48>
    1c76:	68 94       	set
    1c78:	3f 91       	pop	r19
    1c7a:	2a e0       	ldi	r18, 0x0A	; 10
    1c7c:	26 9f       	mul	r18, r22
    1c7e:	11 24       	eor	r1, r1
    1c80:	30 19       	sub	r19, r0
    1c82:	30 5d       	subi	r19, 0xD0	; 208
    1c84:	31 93       	st	Z+, r19
    1c86:	de f6       	brtc	.-74     	; 0x1c3e <__ultoa_invert+0xe>
    1c88:	cf 01       	movw	r24, r30
    1c8a:	08 95       	ret
    1c8c:	46 2f       	mov	r20, r22
    1c8e:	47 70       	andi	r20, 0x07	; 7
    1c90:	40 5d       	subi	r20, 0xD0	; 208
    1c92:	41 93       	st	Z+, r20
    1c94:	b3 e0       	ldi	r27, 0x03	; 3
    1c96:	0f d0       	rcall	.+30     	; 0x1cb6 <__ultoa_invert+0x86>
    1c98:	c9 f7       	brne	.-14     	; 0x1c8c <__ultoa_invert+0x5c>
    1c9a:	f6 cf       	rjmp	.-20     	; 0x1c88 <__ultoa_invert+0x58>
    1c9c:	46 2f       	mov	r20, r22
    1c9e:	4f 70       	andi	r20, 0x0F	; 15
    1ca0:	40 5d       	subi	r20, 0xD0	; 208
    1ca2:	4a 33       	cpi	r20, 0x3A	; 58
    1ca4:	18 f0       	brcs	.+6      	; 0x1cac <__ultoa_invert+0x7c>
    1ca6:	49 5d       	subi	r20, 0xD9	; 217
    1ca8:	31 fd       	sbrc	r19, 1
    1caa:	40 52       	subi	r20, 0x20	; 32
    1cac:	41 93       	st	Z+, r20
    1cae:	02 d0       	rcall	.+4      	; 0x1cb4 <__ultoa_invert+0x84>
    1cb0:	a9 f7       	brne	.-22     	; 0x1c9c <__ultoa_invert+0x6c>
    1cb2:	ea cf       	rjmp	.-44     	; 0x1c88 <__ultoa_invert+0x58>
    1cb4:	b4 e0       	ldi	r27, 0x04	; 4
    1cb6:	a6 95       	lsr	r26
    1cb8:	97 95       	ror	r25
    1cba:	87 95       	ror	r24
    1cbc:	77 95       	ror	r23
    1cbe:	67 95       	ror	r22
    1cc0:	ba 95       	dec	r27
    1cc2:	c9 f7       	brne	.-14     	; 0x1cb6 <__ultoa_invert+0x86>
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	61 05       	cpc	r22, r1
    1cc8:	71 05       	cpc	r23, r1
    1cca:	08 95       	ret
    1ccc:	9b 01       	movw	r18, r22
    1cce:	ac 01       	movw	r20, r24
    1cd0:	0a 2e       	mov	r0, r26
    1cd2:	06 94       	lsr	r0
    1cd4:	57 95       	ror	r21
    1cd6:	47 95       	ror	r20
    1cd8:	37 95       	ror	r19
    1cda:	27 95       	ror	r18
    1cdc:	ba 95       	dec	r27
    1cde:	c9 f7       	brne	.-14     	; 0x1cd2 <__ultoa_invert+0xa2>
    1ce0:	62 0f       	add	r22, r18
    1ce2:	73 1f       	adc	r23, r19
    1ce4:	84 1f       	adc	r24, r20
    1ce6:	95 1f       	adc	r25, r21
    1ce8:	a0 1d       	adc	r26, r0
    1cea:	08 95       	ret

00001cec <_exit>:
    1cec:	f8 94       	cli

00001cee <__stop_program>:
    1cee:	ff cf       	rjmp	.-2      	; 0x1cee <__stop_program>
